package com.flowhub.base.redis;

import java.time.Duration;
import java.util.Optional;
import lombok.RequiredArgsConstructor;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Repository;

/**
 * **L·ªõp `TokenBlackListRepository` - Qu·∫£n l√Ω danh s√°ch token b·ªã v√¥ hi·ªáu h√≥a trong Redis**
 *
 * <p>L·ªõp n√†y cung c·∫•p c√°c ph∆∞∆°ng th·ª©c ƒë·ªÉ thao t√°c v·ªõi danh s√°ch token b·ªã v√¥ hi·ªáu h√≥a
 * trong Redis. Token b·ªã v√¥ hi·ªáu h√≥a s·∫Ω ƒë∆∞·ª£c l∆∞u v·ªõi m·ªôt th·ªùi gian h·∫øt h·∫°n ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng th·ªÉ s·ª≠
 * d·ª•ng l·∫°i sau khi b·ªã thu h·ªìi.</p>
 * <p>
 * **üìå C√°ch ho·∫°t ƒë·ªông:**
 * <pre>
 * - Khi m·ªôt token b·ªã thu h·ªìi, n√≥ s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o Redis v·ªõi `sessionId` l√†m key.
 * - Redis t·ª± ƒë·ªông x√≥a token sau kho·∫£ng th·ªùi gian h·∫øt h·∫°n (`expirationSeconds`).
 * - Khi c·∫ßn ki·ªÉm tra m·ªôt token c√≥ b·ªã v√¥ hi·ªáu h√≥a kh√¥ng, ta g·ªçi `find()` ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ Redis.
 * </pre>
 *
 * @author haidv
 * @version 1.0
 */
@Repository
@RequiredArgsConstructor
public class TokenBlackListRepository {

  private final RedisTemplate<String, Object> redisTemplate;

  /**
   * **T√¨m token b·ªã v√¥ hi·ªáu h√≥a trong Redis (`find`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y t√¨m ki·∫øm m·ªôt `TokenBlackList` trong Redis d·ª±a tr√™n `sessionId`
   * ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ. N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ `Optional.empty()`.</p>
   * <p>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * Optional<TokenBlackList> blacklistedToken = tokenBlackListRepository.find("session-001");
   * if (blacklistedToken.isPresent()) {
   *     System.out.println("Token ƒë√£ b·ªã v√¥ hi·ªáu h√≥a");
   * }
   * }
   * </pre>
   *
   * @param key `sessionId` c·ªßa token.
   * @return `Optional<TokenBlackList>` n·∫øu t·ªìn t·∫°i, `Optional.empty()` n·∫øu kh√¥ng t√¨m th·∫•y.
   */
  public Optional<TokenBlackList> find(String key) {
    return Optional.ofNullable(
        (TokenBlackList) this.redisTemplate.opsForValue().get(composeHeader(key)));
  }

  /**
   * **L∆∞u token v√†o danh s√°ch b·ªã v√¥ hi·ªáu h√≥a trong Redis (`put`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y l∆∞u m·ªôt `TokenBlackList` v√†o Redis v√† ƒë·∫∑t th·ªùi gian h·∫øt h·∫°n
   * ƒë·ªÉ token t·ª± ƒë·ªông b·ªã x√≥a kh·ªèi danh s√°ch blacklist sau khi h·∫øt h·∫°n.</p>
   * <p>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * LocalDateTime expiryTime = LocalDateTime.now().plusMinutes(30);
   * TokenBlackList blacklistedToken = new TokenBlackList("session-001", expiryTime);
   * tokenBlackListRepository.put(blacklistedToken);
   * }
   * </pre>
   *
   * @param tokenBlackList ƒê·ªëi t∆∞·ª£ng `TokenBlackList` c·∫ßn l∆∞u tr·ªØ.
   */
  public void put(TokenBlackList tokenBlackList) {
    this.redisTemplate
        .opsForValue()
        .set(
            composeHeader(tokenBlackList.getSessionId()),
            tokenBlackList,
            Duration.ofSeconds(tokenBlackList.getExpirationSeconds()));
  }

  /**
   * **T·∫°o key chu·∫©n h√≥a ƒë·ªÉ l∆∞u tr·ªØ token trong Redis (`composeHeader`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y t·∫°o key duy nh·∫•t cho m·ªói token b·ªã v√¥ hi·ªáu h√≥a b·∫±ng c√°ch
   * th√™m ti·ªÅn t·ªë `"TokenBlackList:"` v√†o `sessionId`, gi√∫p tr√°nh xung ƒë·ªôt key trong Redis.</p>
   * <p>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * String key = composeHeader("session-001");
   * System.out.println(key); // "TokenBlackList:session-001"
   * }
   * </pre>
   *
   * @param key `sessionId` c·ªßa token.
   * @return Chu·ªói key duy nh·∫•t ƒë·ªÉ l∆∞u trong Redis.
   */
  private String composeHeader(String key) {
    return String.format("TokenBlackList:%s", key);
  }
}