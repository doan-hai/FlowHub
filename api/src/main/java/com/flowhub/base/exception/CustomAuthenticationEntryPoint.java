package com.flowhub.base.exception;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.MessageSource;
import org.springframework.http.MediaType;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.stereotype.Component;
import com.flowhub.base.data.ResponseUtils;
import com.flowhub.base.logging.LoggingProperties;
import com.flowhub.base.utils.RequestUtils;

import static com.flowhub.base.exception.CommonErrorDef.FORBIDDEN;
import static com.flowhub.base.logging.LoggingUtil.logRequest;
import static com.flowhub.base.logging.LoggingUtil.logResponse;
import static com.flowhub.base.utils.JsonUtils.toJson;

/**
 * **L·ªõp `CustomAuthenticationEntryPoint` - X·ª≠ l√Ω l·ªói x√°c th·ª±c kh√¥ng h·ª£p l·ªá (401 Unauthorized)**
 *
 * <p>L·ªõp n√†y tri·ªÉn khai `AuthenticationEntryPoint` ƒë·ªÉ x·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p ng∆∞·ªùi d√πng
 * ch∆∞a x√°c th·ª±c ho·∫∑c x√°c th·ª±c th·∫•t b·∫°i khi truy c·∫≠p t√†i nguy√™n b·∫£o v·ªá trong h·ªá th·ªëng.</p>
 * <p>
 * **üìå C√°ch ho·∫°t ƒë·ªông:**
 * <p>Khi m·ªôt ng∆∞·ªùi d√πng ch∆∞a x√°c th·ª±c ho·∫∑c kh√¥ng h·ª£p l·ªá c·ªë g·∫Øng truy c·∫≠p v√†o t√†i nguy√™n b·∫£o v·ªá,
 * h·ªá th·ªëng s·∫Ω k√≠ch ho·∫°t `commence()` ƒë·ªÉ th·ª±c hi·ªán c√°c b∆∞·ªõc sau:</p>
 * <ul>
 *   <li>üìå Ghi log y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng.</li>
 *   <li>üìå Ghi log c·∫£nh b√°o v·ªÅ vi·ªác c·∫ßn ƒëƒÉng nh·∫≠p.</li>
 *   <li>üìå T·∫°o ph·∫£n h·ªìi JSON ch·ª©a th√¥ng tin l·ªói (`FORBIDDEN`).</li>
 *   <li>üìå Ghi log ph·∫£n h·ªìi v√† g·ª≠i tr·∫£ v·ªÅ client.</li>
 * </ul>
 * <p>
 * **üìå V√≠ d·ª• ph·∫£n h·ªìi JSON khi x√°c th·ª±c th·∫•t b·∫°i:**
 * <pre>
 * {
 *     "errorCode": "CM_0003",
 *     "message": "Forbidden",
 *     "detailedMessage": "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.",
 *     "data": null
 * }
 * </pre>
 *
 * @author haidv
 * @version 1.0
 */
@Slf4j
@RequiredArgsConstructor
@Component
public class CustomAuthenticationEntryPoint implements AuthenticationEntryPoint {

  /** C·∫•u h√¨nh logging ƒë·ªÉ x√°c ƒë·ªãnh c√≥ ghi log request/response hay kh√¥ng** */
  private final LoggingProperties loggingProperties;

  private final MessageSource messageSource;

  /**
   * **X·ª≠ l√Ω l·ªói x√°c th·ª±c kh√¥ng h·ª£p l·ªá (`commence`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c ƒëƒÉng nh·∫≠p th·∫•t b·∫°i.
   * N√≥ s·∫Ω tr·∫£ v·ªÅ ph·∫£n h·ªìi JSON ch·ª©a th√¥ng tin l·ªói v√† ghi log l·ªói.</p>
   *
   * @param request       ƒê·ªëi t∆∞·ª£ng `HttpServletRequest` ch·ª©a th√¥ng tin y√™u c·∫ßu.
   * @param response      ƒê·ªëi t∆∞·ª£ng `HttpServletResponse` ƒë·ªÉ g·ª≠i ph·∫£n h·ªìi l·ªói.
   * @param authException Ngo·∫°i l·ªá `AuthenticationException` ch·ª©a th√¥ng tin l·ªói.
   * @throws IOException N·∫øu c√≥ l·ªói x·∫£y ra khi ghi ph·∫£n h·ªìi.
   */
  @Override
  public void commence(
      HttpServletRequest request,
      HttpServletResponse response,
      AuthenticationException authException)
      throws IOException {
    // Ghi log y√™u c·∫ßu HTTP tr∆∞·ªõc khi x·ª≠ l√Ω l·ªói
    logRequest(request, loggingProperties);

    // Ghi log c·∫£nh b√°o y√™u c·∫ßu ƒëƒÉng nh·∫≠p
    log.warn("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.");

    // L·∫•y m√£ l·ªói FORBIDDEN t·ª´ danh s√°ch l·ªói chung
    var errorCode = FORBIDDEN;

    // C·∫•u h√¨nh response tr·∫£ v·ªÅ cho client
    response.setStatus(errorCode.getHttpStatus().value());
    response.setContentType(MediaType.APPLICATION_JSON_VALUE);
    response.setCharacterEncoding("UTF-8");

    // Vi·∫øt ph·∫£n h·ªìi JSON v√†o response
    response
        .getWriter()
        .print(
            toJson(
                ResponseUtils.getResponseDataError(
                    errorCode.getErrorCode(),
                    authException.getMessage(),
                    messageSource.getMessage(
                        errorCode.getErrorCode(),
                        null,
                        authException.getMessage(),
                        RequestUtils.extractLocale()),
                    null)));

    // Ghi log ph·∫£n h·ªìi JSON tr∆∞·ªõc khi g·ª≠i cho client
    logResponse(request, response, loggingProperties);
  }
}