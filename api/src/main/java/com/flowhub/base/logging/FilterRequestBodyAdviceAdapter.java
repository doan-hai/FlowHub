package com.flowhub.base.logging;

import jakarta.servlet.http.HttpServletRequest;

import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.core.MethodParameter;
import org.springframework.http.HttpInputMessage;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdviceAdapter;
import com.flowhub.base.data.EncryptInput;
import com.flowhub.base.data.SecureInput;
import com.flowhub.base.exception.BaseException;
import com.flowhub.base.exception.CommonErrorDef;
import com.flowhub.base.security.AbstractSecurityRequest;
import com.flowhub.base.utils.JsonUtils;

import static com.flowhub.base.logging.LoggingUtil.logRequest;

/**
 * **L·ªõp `FilterRequestBodyAdviceAdapter` - X·ª≠ l√Ω d·ªØ li·ªáu ƒë·∫ßu v√†o c·ªßa request body**
 *
 * <p>ƒê√¢y l√† m·ªôt `RequestBodyAdviceAdapter` gi√∫p x·ª≠ l√Ω d·ªØ li·ªáu ƒë·∫ßu v√†o trong request body,
 * ƒë·∫∑c bi·ªát l√† c√°c request c√≥ d·ªØ li·ªáu ƒë∆∞·ª£c m√£ h√≥a ho·∫∑c b·∫£o m·∫≠t.</p>
 * <p>
 * **üìå C√°ch ho·∫°t ƒë·ªông:**
 * <p>M·ªói khi m·ªôt request g·ª≠i d·ªØ li·ªáu l√™n server, l·ªõp n√†y s·∫Ω ki·ªÉm tra xem request
 * c√≥ ch·ª©a d·ªØ li·ªáu ƒë∆∞·ª£c m√£ h√≥a (`EncryptInput`) ho·∫∑c c√≥ ch·ªØ k√Ω b·∫£o m·∫≠t (`SecureInput`). N·∫øu c√≥, n√≥
 * s·∫Ω th·ª±c hi·ªán c√°c thao t√°c gi·∫£i m√£ ho·∫∑c ki·ªÉm tra ch·ªØ k√Ω tr∆∞·ªõc khi chuy·ªÉn ti·∫øp request.</p>
 * <pre>
 * **üìå V√≠ d·ª• d·ªØ li·ªáu m√£ h√≥a (`EncryptInput`):**
 * ```json
 * {
 *   "encryptData": "H4sh3dV4lu3",
 *   "rawData": null
 * }
 * ```
 *
 * **üìå V√≠ d·ª• d·ªØ li·ªáu c√≥ ch·ªØ k√Ω (`SecureInput`):**
 * ```json
 * {
 *   "data": { "username": "user123", "timestamp": 1700000000 },
 *   "signature": "abc123xyz"
 * }
 * ```
 * </pre>
 *
 * @author haidv
 * @version 1.0
 */
@Slf4j
@RequiredArgsConstructor
@ControllerAdvice
public class FilterRequestBodyAdviceAdapter extends RequestBodyAdviceAdapter {

  /** Request hi·ªán t·∫°i, d√πng ƒë·ªÉ l·∫•y th√¥ng tin request header** */
  private final HttpServletRequest httpServletRequest;

  /** C·∫•u h√¨nh logging ƒë·ªÉ x√°c ƒë·ªãnh c√≥ ghi log request hay kh√¥ng** */
  private final LoggingProperties loggingProperties;

  /** Application context ƒë·ªÉ l·∫•y bean x·ª≠ l√Ω b·∫£o m·∫≠t** */
  private final ApplicationContext applicationContext;

  /** T√™n bean d√πng ƒë·ªÉ gi·∫£i m√£ d·ªØ li·ªáu trong request** */
  @Value("${custom.properties.security.request.security-bean-name}")
  private String secureRequestBeanName;

  /**
   * **X√°c ƒë·ªãnh request c√≥ c·∫ßn x·ª≠ l√Ω b·ªüi `RequestBodyAdvice` kh√¥ng (`supports`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y quy·∫øt ƒë·ªãnh li·ªáu `RequestBodyAdviceAdapter` c√≥ c·∫ßn can thi·ªáp
   * v√†o vi·ªác x·ª≠ l√Ω request hay kh√¥ng. ·ªû ƒë√¢y, n√≥ lu√¥n tr·∫£ v·ªÅ `true` ƒë·ªÉ √°p d·ª•ng cho t·∫•t c·∫£
   * request.</p>
   *
   * @param methodParameter Th√¥ng tin v·ªÅ ph∆∞∆°ng th·ª©c x·ª≠ l√Ω request.
   * @param targetType      Ki·ªÉu d·ªØ li·ªáu c·ªßa body trong request.
   * @param converterType   Ki·ªÉu `HttpMessageConverter` ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng.
   * @return Lu√¥n tr·∫£ v·ªÅ `true`, nghƒ©a l√† √°p d·ª•ng cho t·∫•t c·∫£ request.
   */
  @Override
  public boolean supports(
      MethodParameter methodParameter,
      Type targetType,
      Class<? extends HttpMessageConverter<?>> converterType) {
    return true;
  }

  /**
   * **X·ª≠ l√Ω d·ªØ li·ªáu trong request body sau khi ƒë·ªçc (`afterBodyRead`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y x·ª≠ l√Ω request body sau khi ƒë√£ ƒë∆∞·ª£c ƒë·ªçc, bao g·ªìm:</p>
   * <ul>
   *   <li>üìå N·∫øu request ch·ª©a `EncryptInput`, gi·∫£i m√£ d·ªØ li·ªáu.</li>
   *   <li>üìå N·∫øu request ch·ª©a `SecureInput`, ki·ªÉm tra ch·ªØ k√Ω d·ªØ li·ªáu.</li>
   *   <li>üìå Ghi log request ƒë·ªÉ h·ªó tr·ª£ theo d√µi.</li>
   * </ul>
   *
   * @param body          D·ªØ li·ªáu c·ªßa request body.
   * @param inputMessage  ƒê·ªëi t∆∞·ª£ng `HttpInputMessage` ch·ª©a request g·ªëc.
   * @param parameter     Th√¥ng tin v·ªÅ ph∆∞∆°ng th·ª©c x·ª≠ l√Ω request.
   * @param targetType    Ki·ªÉu d·ªØ li·ªáu c·ªßa body.
   * @param converterType Ki·ªÉu `HttpMessageConverter` ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng.
   * @return D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω, c√≥ th·ªÉ l√† b·∫£n g·ªëc ho·∫∑c ƒë√£ ƒë∆∞·ª£c gi·∫£i m√£/x√°c th·ª±c.
   */
  @SuppressWarnings({"unchecked", "rawtypes"})
  @Override
  public Object afterBodyRead(
      Object body,
      HttpInputMessage inputMessage,
      MethodParameter parameter,
      Type targetType,
      Class<? extends HttpMessageConverter<?>> converterType) {

    // **üìå X·ª≠ l√Ω request c√≥ EncryptInput (d·ªØ li·ªáu m√£ h√≥a)**
    switch (body) {
      case EncryptInput secureRequest -> {
        secureRequest.setRawData(null); // X√≥a d·ªØ li·ªáu th√¥ tr∆∞·ªõc khi gi·∫£i m√£

        try {
          // **L·∫•y bean x·ª≠ l√Ω b·∫£o m·∫≠t ƒë·ªÉ gi·∫£i m√£ d·ªØ li·ªáu**
          var json =
              applicationContext
                  .getAutowireCapableBeanFactory()
                  .getBean(secureRequestBeanName, AbstractSecurityRequest.class)
                  .decryptData(secureRequest.getEncryptData());

          // **Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu JSON th√†nh object t∆∞∆°ng ·ª©ng**
          secureRequest.setRawData(
              JsonUtils.fromJson(
                  json, (Class) ((ParameterizedType) targetType).getActualTypeArguments()[0]));

        } catch (Exception e) {
          log.error(e.getMessage(), e);
          throw new BaseException(CommonErrorDef.NOT_DECRYPT_SECURE_REQUEST);
        } finally {
          // **Ghi log request ƒë·ªÉ gi√°m s√°t**
          logRequest(httpServletRequest, loggingProperties, secureRequest);
        }

        return super.afterBodyRead(secureRequest,
                                   inputMessage,
                                   parameter,
                                   targetType,
                                   converterType);
      }

      // **üìå X·ª≠ l√Ω request c√≥ SecureInput (d·ªØ li·ªáu c√≥ ch·ªØ k√Ω b·∫£o m·∫≠t)**
      case SecureInput secureRequest -> {
        logRequest(httpServletRequest, loggingProperties, secureRequest);

        // **L·∫•y kh√≥a ƒë·ªÉ ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa ch·ªØ k√Ω**
        var checksumKey =
            applicationContext
                .getAutowireCapableBeanFactory()
                .getBean(secureRequestBeanName, AbstractSecurityRequest.class)
                .getChecksumKey();

        // **N·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá, n√©m ngo·∫°i l·ªá**
        if (!secureRequest.isValidData(checksumKey)) {
          throw new BaseException(CommonErrorDef.SIGNATURE_INVALID);
        }

        return super.afterBodyRead(secureRequest,
                                   inputMessage,
                                   parameter,
                                   targetType,
                                   converterType);
      }

      // **üìå X·ª≠ l√Ω request th√¥ng th∆∞·ªùng (kh√¥ng m√£ h√≥a, kh√¥ng c√≥ ch·ªØ k√Ω)**
      default -> {
        logRequest(httpServletRequest, loggingProperties, body);
        return super.afterBodyRead(body, inputMessage, parameter, targetType, converterType);
      }
    }
  }
}