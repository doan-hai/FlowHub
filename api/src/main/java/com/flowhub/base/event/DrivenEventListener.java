package com.flowhub.base.event;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.logging.log4j.ThreadContext;
import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.event.EventListener;
import org.springframework.core.task.TaskExecutor;
import com.flowhub.base.exception.BaseException;

/**
 * **L·ªõp `DrivenEventListener` - L·∫Øng nghe v√† x·ª≠ l√Ω s·ª± ki·ªán trong h·ªá th·ªëng**
 *
 * <p>L·ªõp n√†y ƒë√≥ng vai tr√≤ l√† m·ªôt event listener trung gian, ch·ªãu tr√°ch nhi·ªám ti·∫øp nh·∫≠n s·ª± ki·ªán
 * v√† ƒëi·ªÅu ph·ªëi x·ª≠ l√Ω s·ª± ki·ªán ƒë·ªìng b·ªô ho·∫∑c b·∫•t ƒë·ªìng b·ªô.</p>
 * <p>
 * **üìå C√°ch ho·∫°t ƒë·ªông:**
 * <p>S·ª± ki·ªán s·∫Ω ƒë∆∞·ª£c g·ª≠i v√†o ph∆∞∆°ng th·ª©c `handleEvent()`. D·ª±a v√†o c·∫•u h√¨nh, s·ª± ki·ªán s·∫Ω:</p>
 * <ul>
 *   <li>üìå ƒê∆∞·ª£c x·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô n·∫øu `isSync = false` (ƒë∆∞a v√†o `TaskExecutor`).</li>
 *   <li>üìå ƒê∆∞·ª£c x·ª≠ l√Ω ƒë·ªìng b·ªô n·∫øu `isSync = true`.</li>
 *   <li>üìå D·ª±a v√†o th√¥ng tin trong `EventInfo`, h·ªá th·ªëng s·∫Ω t√¨m `bean` v√† ph∆∞∆°ng th·ª©c ƒë·ªÉ x·ª≠ l√Ω s·ª± ki·ªán.</li>
 *   <li>üìå N·∫øu c√≥ l·ªói x·∫£y ra, h·ªá th·ªëng s·∫Ω th·ª±c hi·ªán l·∫°i (`retry`) theo s·ªë l·∫ßn quy ƒë·ªãnh.</li>
 * </ul>
 * <p>
 * **üìå V√≠ d·ª• s·ª≠ d·ª•ng s·ª± ki·ªán v·ªõi `DrivenEventListener`:**
 * <pre>
 * {@code
 * @Component
 * public class UserEventHandler {
 *
 *     public void handleUserCreated(UserCreatedEvent event) {
 *         System.out.println("Handling user created event: " + event.getUserId());
 *     }
 * }
 * }
 * </pre>
 * <p>
 * **üìå V√≠ d·ª• g·ª≠i s·ª± ki·ªán:**
 * <pre>
 * {@code
 * EventInfo eventInfo = new EventInfo(new UserCreatedEvent(123), "userEventHandler", "handleUserCreated", false);
 * applicationContext.publishEvent(eventInfo);
 * }
 * </pre>
 *
 * @author haidv
 * @version 1.0
 */
@Slf4j
@NoArgsConstructor
public abstract class DrivenEventListener {

  /** ApplicationContext ƒë·ªÉ l·∫•y bean x·ª≠ l√Ω s·ª± ki·ªán** */
  private ApplicationContext applicationContext;

  /** Executor d√πng ƒë·ªÉ x·ª≠ l√Ω s·ª± ki·ªán b·∫•t ƒë·ªìng b·ªô** */
  private TaskExecutor executor;

  /**
   * **Constructor kh·ªüi t·∫°o `DrivenEventListener`**
   *
   * @param applicationContext `ApplicationContext` d√πng ƒë·ªÉ l·∫•y bean x·ª≠ l√Ω s·ª± ki·ªán.
   * @param executor           `TaskExecutor` ƒë·ªÉ x·ª≠ l√Ω s·ª± ki·ªán b·∫•t ƒë·ªìng b·ªô.
   */
  protected DrivenEventListener(ApplicationContext applicationContext, TaskExecutor executor) {
    this.applicationContext = applicationContext;
    this.executor = executor;
  }

  /**
   * **X·ª≠ l√Ω l·ªói khi s·ª± ki·ªán g·∫∑p l·ªói (`processHandleErrorEventAsync`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y c·∫ßn ƒë∆∞·ª£c c√°c l·ªõp con tri·ªÉn khai ƒë·ªÉ x·ª≠ l√Ω khi c√≥ l·ªói x·∫£y ra.</p>
   *
   * @param eventInfo Th√¥ng tin s·ª± ki·ªán b·ªã l·ªói.
   */
  protected abstract void processHandleErrorEventAsync(EventInfo eventInfo);

  /**
   * **Ghi log khi x·ª≠ l√Ω s·ª± ki·ªán (`processLogHandleEventAsync`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y c·∫ßn ƒë∆∞·ª£c c√°c l·ªõp con tri·ªÉn khai ƒë·ªÉ ghi log th√¥ng tin s·ª± ki·ªán.</p>
   *
   * @param eventInfo Th√¥ng tin s·ª± ki·ªán c·∫ßn ghi log.
   */
  protected abstract void processLogHandleEventAsync(EventInfo eventInfo);

  /**
   * **L·∫Øng nghe v√† x·ª≠ l√Ω s·ª± ki·ªán (`handleEvent`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y s·∫Ω ti·∫øp nh·∫≠n s·ª± ki·ªán t·ª´ h·ªá th·ªëng v√† x√°c ƒë·ªãnh c√°ch x·ª≠ l√Ω:</p>
   * <ul>
   *   <li>üìå N·∫øu `isSync = false`, s·ª± ki·ªán s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô b·∫±ng `TaskExecutor`.</li>
   *   <li>üìå N·∫øu `isSync = true`, s·ª± ki·ªán s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ngay l·∫≠p t·ª©c.</li>
   * </ul>
   *
   * @param eventInfo Th√¥ng tin s·ª± ki·ªán c·∫ßn x·ª≠ l√Ω.
   */
  @EventListener
  public void handleEvent(EventInfo eventInfo) {
    if (!eventInfo.isSync()) {
      var context = ThreadContext.getContext();
      executor.execute(
          () -> {
            ThreadContext.putAll(context);
            processLogHandleEventAsync(eventInfo);
            routerEventHandle(eventInfo);
            ThreadContext.clearAll();
          });
    } else {
      routerEventHandle(eventInfo);
    }
  }

  /**
   * **X√°c ƒë·ªãnh bean v√† ph∆∞∆°ng th·ª©c x·ª≠ l√Ω s·ª± ki·ªán (`routerEventHandle`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y l·∫•y th√¥ng tin v·ªÅ bean v√† ph∆∞∆°ng th·ª©c x·ª≠ l√Ω s·ª± ki·ªán t·ª´ `EventInfo`
   * v√† th·ª±c thi ph∆∞∆°ng th·ª©c ƒë√≥.</p>
   *
   * @param eventInfo Th√¥ng tin s·ª± ki·ªán.
   */
  private void routerEventHandle(EventInfo eventInfo) {
    var event = eventInfo.getEvent();
    if (event == null) {
      log.warn("The event to be handled was not found");
      return;
    }
    log.info("Start handle event: {} id: {}", event.getEventName(), eventInfo.getId());
    var handleEventClassName = event.getHandleEventBeanName();
    var handleEventFunctionName = event.getHandleEventFunctionName();
    try {
      Object obj = applicationContext.getBean(handleEventClassName);
      var opt =
          Arrays.stream(obj.getClass().getMethods())
                .filter(v -> v.getName().equals(handleEventFunctionName))
                .findFirst();
      if (opt.isPresent()) {
        invokeHandleMethod(0, eventInfo.getRetry() + 1, opt.get(), obj, eventInfo);
      } else {
        log.warn("Method {} not found", handleEventFunctionName);
      }
    } catch (BeansException e) {
      log.warn("Bean {} not found", handleEventClassName, e);
    }
    log.info("End handle event: {} id: {}", event.getEventName(), eventInfo.getId());
  }

  /**
   * **Th·ª±c thi ph∆∞∆°ng th·ª©c x·ª≠ l√Ω s·ª± ki·ªán (`invokeHandleMethod`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y s·∫Ω g·ªçi ph∆∞∆°ng th·ª©c x·ª≠ l√Ω s·ª± ki·ªán v√† h·ªó tr·ª£ retry n·∫øu c√≥ l·ªói x·∫£y ra.</p>
   * <p>
   * **üìå C√°ch x·ª≠ l√Ω khi c√≥ l·ªói:**
   * <ul>
   *   <li>üìå N·∫øu s·ªë l·∫ßn th·ª≠ l·∫°i ƒë·∫°t gi·ªõi h·∫°n, g·ªçi `processHandleErrorEventAsync`.</li>
   *   <li>üìå N·∫øu x·∫£y ra `BaseException`, n√©m l·ªói ngay l·∫≠p t·ª©c.</li>
   *   <li>üìå N·∫øu x·∫£y ra l·ªói kh√°c, th·ª±c hi·ªán retry.</li>
   * </ul>
   *
   * @param index           S·ªë l·∫ßn th·ª≠ hi·ªán t·∫°i.
   * @param totalNumberExec S·ªë l·∫ßn th·ª≠ t·ªëi ƒëa.
   * @param m               Ph∆∞∆°ng th·ª©c c·∫ßn g·ªçi.
   * @param obj             ƒê·ªëi t∆∞·ª£ng ch·ª©a ph∆∞∆°ng th·ª©c.
   * @param eventInfo       Th√¥ng tin s·ª± ki·ªán.
   */
  private void invokeHandleMethod(
      int index, int totalNumberExec, Method m, Object obj, EventInfo eventInfo) {
    var event = eventInfo.getEvent();
    if (index >= totalNumberExec && !eventInfo.isSync()) {
      processHandleErrorEventAsync(eventInfo);
      return;
    }
    if (index > 0) {
      log.info("Try the {}th event handling {} again", index, event.getEventName());
    }
    try {
      m.invoke(obj, eventInfo.getWhat());
    } catch (InvocationTargetException e) {
      if (e.getTargetException() instanceof BaseException baseException) {
        throw baseException;
      }
      log.error("Handle event {} error", event.getEventName(), e);
      invokeHandleMethod(index + 1, totalNumberExec, m, obj, eventInfo);
    } catch (Exception e) {
      log.error("Handle event {} error", event.getEventName(), e);
      invokeHandleMethod(index + 1, totalNumberExec, m, obj, eventInfo);
    }
  }
}
