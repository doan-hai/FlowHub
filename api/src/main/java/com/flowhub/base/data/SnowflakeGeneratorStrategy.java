package com.flowhub.base.data;

import java.io.Serializable;
import java.util.Properties;
import org.hibernate.HibernateException;
import org.hibernate.MappingException;
import org.hibernate.engine.spi.SharedSessionContractImplementor;
import org.hibernate.id.IdentifierGenerator;
import org.hibernate.service.ServiceRegistry;
import org.hibernate.type.Type;
import com.flowhub.base.utils.Snowflake;

/**
 * **Chi·∫øn l∆∞·ª£c sinh ID b·∫±ng Snowflake (`SnowflakeGeneratorStrategy`)**
 *
 * <p>L·ªõp n√†y tri·ªÉn khai `IdentifierGenerator` c·ªßa Hibernate ƒë·ªÉ t·∫°o ID duy nh·∫•t
 * s·ª≠ d·ª•ng thu·∫≠t to√°n **Snowflake ID**.</p>
 * <p>
 * **üìå C√°ch ho·∫°t ƒë·ªông:**
 * <p>Trong qu√° tr√¨nh l∆∞u entity v√†o c∆° s·ªü d·ªØ li·ªáu, n·∫øu entity ch∆∞a c√≥ ID,
 * l·ªõp n√†y s·∫Ω t·ª± ƒë·ªông t·∫°o m·ªôt ID m·ªõi s·ª≠ d·ª•ng Snowflake v√† g√°n v√†o entity.</p>
 * <p>
 * **üìå V√≠ d·ª• s·ª≠ d·ª•ng trong entity:**
 * <pre>
 * {@code
 * @Entity
 * public class User extends BaseEntity {
 *     @Id
 *     @GeneratedValue(generator = "snowflake")
 *     @GenericGenerator(name = "snowflake", type = SnowflakeGeneratorStrategy.class)
 *     private Long id;
 * }
 * }
 * </pre>
 *
 * @author haidv
 * @version 1.0
 */
public class SnowflakeGeneratorStrategy implements IdentifierGenerator {

  /** Lo·∫°i d·ªØ li·ªáu c·ªßa ID (h·ªó tr·ª£ Long)** */
  private AttributeType idType;

  /**
   * **C·∫•u h√¨nh ki·ªÉu d·ªØ li·ªáu ID (`configure`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y ƒë∆∞·ª£c g·ªçi khi Hibernate kh·ªüi t·∫°o generator, gi√∫p x√°c ƒë·ªãnh
   * ki·ªÉu d·ªØ li·ªáu c·ªßa ID (`Long`).</p>
   *
   * @param type            Ki·ªÉu d·ªØ li·ªáu c·ªßa ID (Hibernate Type).
   * @param params          C√°c tham s·ªë c·∫•u h√¨nh t·ª´ Hibernate.
   * @param serviceRegistry ƒê·ªëi t∆∞·ª£ng `ServiceRegistry` c·ªßa Hibernate.
   * @throws MappingException N·∫øu ki·ªÉu d·ªØ li·ªáu ID kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.
   */
  @Override
  public void configure(Type type, Properties params, ServiceRegistry serviceRegistry)
      throws MappingException {
    idType = AttributeType.valueOf(type.getReturnedClass());
  }

  /**
   * **Sinh ID cho entity (`generate`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y ƒë∆∞·ª£c Hibernate g·ªçi m·ªói khi c·∫ßn t·∫°o ID cho m·ªôt entity.</p>
   * <p>
   * **üìå C√°ch ho·∫°t ƒë·ªông:**
   * <ul>
   *   <li>üìå N·∫øu entity ƒë√£ c√≥ ID (kh√°c `null`), tr·∫£ v·ªÅ ID c≈©.</li>
   *   <li>üìå N·∫øu entity ch∆∞a c√≥ ID, sinh m·ªôt ID m·ªõi b·∫±ng **Snowflake**.</li>
   * </ul>
   * <p>
   * **üìå V√≠ d·ª• ho·∫°t ƒë·ªông:**
   * <pre>
   * {@code
   * Long id = (Long) generator.generate(session, new User());
   * System.out.println("Generated ID: " + id);
   * }
   * </pre>
   *
   * @param session ƒê·ªëi t∆∞·ª£ng `SharedSessionContractImplementor` c·ªßa Hibernate.
   * @param object  ƒê·ªëi t∆∞·ª£ng entity c·∫ßn t·∫°o ID.
   * @return ID ƒë∆∞·ª£c t·∫°o m·ªõi ho·∫∑c ID ƒë√£ c√≥ c·ªßa entity.
   * @throws HibernateException N·∫øu c√≥ l·ªói trong qu√° tr√¨nh sinh ID.
   */
  @Override
  public Serializable generate(SharedSessionContractImplementor session, Object object)
      throws HibernateException {
    if (object instanceof BaseEntity obj && obj.getId() != null) {
      return idType.cast(obj.getId());
    }
    return idType.cast(Snowflake.getInstance().nextId());
  }

  /**
   * **Enum x√°c ƒë·ªãnh ki·ªÉu d·ªØ li·ªáu c·ªßa ID (`AttributeType`)**
   *
   * <p>Hi·ªán t·∫°i ch·ªâ h·ªó tr·ª£ ki·ªÉu `Long`, nh∆∞ng c√≥ th·ªÉ m·ªü r·ªông cho c√°c ki·ªÉu kh√°c n·∫øu c·∫ßn.</p>
   */
  public enum AttributeType {

    /** Ki·ªÉu d·ªØ li·ªáu Long** */
    LONG {
      @Override
      public Serializable cast(Long id) {
        return id;
      }
    };

    /**
     * **X√°c ƒë·ªãnh ki·ªÉu d·ªØ li·ªáu ID t·ª´ l·ªõp Java (`valueOf`)**
     *
     * <p>H√†m n√†y ki·ªÉm tra xem ki·ªÉu d·ªØ li·ªáu c·ªßa ID c√≥ h·ª£p l·ªá kh√¥ng.</p>
     *
     * @param clazz L·ªõp c·ªßa thu·ªôc t√≠nh ID.
     * @return Ki·ªÉu d·ªØ li·ªáu t∆∞∆°ng ·ª©ng.
     * @throws HibernateException N·∫øu ki·ªÉu d·ªØ li·ªáu kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.
     */
    static AttributeType valueOf(Class<?> clazz) {
      if (Long.class.isAssignableFrom(clazz)) {
        return LONG;
      } else {
        throw new HibernateException(
            String.format(
                "The @Tsid annotation on [%s] can only be placed on a Long or String entity attribute!",
                clazz));
      }
    }

    /**
     * **Chuy·ªÉn ƒë·ªïi ID v·ªÅ ki·ªÉu d·ªØ li·ªáu ph√π h·ª£p (`cast`)**
     *
     * @param id ID c·∫ßn chuy·ªÉn ƒë·ªïi.
     * @return ID ƒë√£ ƒë∆∞·ª£c √©p ki·ªÉu.
     */
    public abstract Serializable cast(Long id);
  }
}
