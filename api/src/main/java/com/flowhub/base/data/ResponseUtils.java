package com.flowhub.base.data;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

/**
 * **L·ªõp ti·ªán √≠ch h·ªó tr·ª£ t·∫°o ph·∫£n h·ªìi HTTP (`ResponseUtils`)**
 *
 * <p>L·ªõp n√†y cung c·∫•p c√°c ph∆∞∆°ng th·ª©c ti·ªán √≠ch ƒë·ªÉ t·∫°o `ResponseEntity<ResponseData<T>>`
 * m·ªôt c√°ch nh·∫•t qu√°n trong h·ªá th·ªëng API.</p>
 * <p>
 * **üìå C√°ch ho·∫°t ƒë·ªông:**
 * <p>C√°c ph∆∞∆°ng th·ª©c trong l·ªõp n√†y gi√∫p API tr·∫£ v·ªÅ ph·∫£n h·ªìi nh·∫•t qu√°n m√† kh√¥ng c·∫ßn vi·∫øt l·∫°i logic
 * nhi·ªÅu l·∫ßn.</p>
 * <p>
 * **üìå V√≠ d·ª• s·ª≠ d·ª•ng trong API Controller:**
 * <pre>
 * {@code
 * @RestController
 * public class UserController {
 *
 *     @GetMapping("/users")
 *     public ResponseEntity<ResponseData<List<UserDto>>> getUsers() {
 *         List<UserDto> users = userService.getAllUsers();
 *         return ResponseUtils.success(users);
 *     }
 *
 *     @PostMapping("/users")
 *     public ResponseEntity<ResponseData<UserDto>> createUser(@RequestBody UserDto userDto) {
 *         UserDto createdUser = userService.createUser(userDto);
 *         return ResponseUtils.created(createdUser);
 *     }
 *
 *     @GetMapping("/error")
 *     public ResponseEntity<ResponseData<Void>> getError() {
 *         return ResponseUtils.error("400", "Invalid Request", "Bad Request", HttpStatus.BAD_REQUEST);
 *     }
 * }
 * }
 * </pre>
 *
 * @author haidv
 * @version 1.0
 */
public final class ResponseUtils {

  /**
   * **Constructor ri√™ng t∆∞ ƒë·ªÉ ch·∫∑n kh·ªüi t·∫°o l·ªõp**
   *
   * <p>L·ªõp n√†y ch·ªâ ch·ª©a c√°c ph∆∞∆°ng th·ª©c ti·ªán √≠ch (`static`),
   * n√™n kh√¥ng c·∫ßn kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng. N·∫øu g·ªçi constructor, n√≥ s·∫Ω n√©m `IllegalStateException`.</p>
   */
  private ResponseUtils() {
    throw new IllegalStateException("Utility class");
  }

  /**
   * **T·∫°o ph·∫£n h·ªìi th√†nh c√¥ng kh√¥ng c√≥ d·ªØ li·ªáu (`success`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y tr·∫£ v·ªÅ `ResponseEntity` v·ªõi m√£ HTTP 200 OK v√† kh√¥ng c√≥ d·ªØ li·ªáu.</p>
   * <p>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * ResponseEntity<ResponseData<Void>> response = ResponseUtils.success();
   * }
   * </pre>
   *
   * @param <T> Ki·ªÉu d·ªØ li·ªáu c·ªßa ph·∫£n h·ªìi.
   * @return `ResponseEntity<ResponseData<T>>` v·ªõi m√£ HTTP 200 OK.
   */
  public static <T> ResponseEntity<ResponseData<T>> success() {
    return success(null);
  }

  /**
   * **T·∫°o ph·∫£n h·ªìi th√†nh c√¥ng v·ªõi d·ªØ li·ªáu (`success`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y tr·∫£ v·ªÅ `ResponseEntity` v·ªõi m√£ HTTP 200 OK v√† d·ªØ li·ªáu ƒëi k√®m.</p>
   * <p>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * ResponseEntity<ResponseData<String>> response = ResponseUtils.success("Th√†nh c√¥ng");
   * }
   * </pre>
   *
   * @param o   D·ªØ li·ªáu tr·∫£ v·ªÅ.
   * @param <T> Ki·ªÉu d·ªØ li·ªáu c·ªßa ph·∫£n h·ªìi.
   * @return `ResponseEntity<ResponseData<T>>` v·ªõi m√£ HTTP 200 OK v√† d·ªØ li·ªáu.
   */
  public static <T> ResponseEntity<ResponseData<T>> success(T o) {
    return ResponseEntity.ok(new ResponseData<T>().success(o));
  }

  /**
   * **T·∫°o ph·∫£n h·ªìi khi t√†i nguy√™n ƒë∆∞·ª£c t·∫°o (`created`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y tr·∫£ v·ªÅ `ResponseEntity` v·ªõi m√£ HTTP 201 CREATED m√† kh√¥ng c√≥ d·ªØ li·ªáu.</p>
   * <p>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * ResponseEntity<ResponseData<Void>> response = ResponseUtils.created();
   * }
   * </pre>
   *
   * @param <T> Ki·ªÉu d·ªØ li·ªáu c·ªßa ph·∫£n h·ªìi.
   * @return `ResponseEntity<ResponseData<T>>` v·ªõi m√£ HTTP 201 CREATED.
   */
  public static <T> ResponseEntity<ResponseData<T>> created() {
    return created(null);
  }

  /**
   * **T·∫°o ph·∫£n h·ªìi khi t√†i nguy√™n ƒë∆∞·ª£c t·∫°o v·ªõi d·ªØ li·ªáu (`created`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y tr·∫£ v·ªÅ `ResponseEntity` v·ªõi m√£ HTTP 201 CREATED v√† d·ªØ li·ªáu ƒëi k√®m.</p>
   * <p>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * ResponseEntity<ResponseData<UserDto>> response = ResponseUtils.created(new UserDto("John", "Doe"));
   * }
   * </pre>
   *
   * @param o   D·ªØ li·ªáu tr·∫£ v·ªÅ.
   * @param <T> Ki·ªÉu d·ªØ li·ªáu c·ªßa ph·∫£n h·ªìi.
   * @return `ResponseEntity<ResponseData<T>>` v·ªõi m√£ HTTP 201 CREATED v√† d·ªØ li·ªáu.
   */
  public static <T> ResponseEntity<ResponseData<T>> created(T o) {
    return ResponseEntity.status(HttpStatus.CREATED).body(new ResponseData<T>().success(o));
  }

  /**
   * **T·∫°o ph·∫£n h·ªìi l·ªói (`error`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y tr·∫£ v·ªÅ `ResponseEntity` v·ªõi m√£ l·ªói HTTP v√† th√¥ng b√°o l·ªói.</p>
   * <p>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * ResponseEntity<ResponseData<Void>> response = ResponseUtils.error("400", "Invalid Data", "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", HttpStatus.BAD_REQUEST);
   * }
   * </pre>
   *
   * @param code      M√£ l·ªói.
   * @param errorDesc M√¥ t·∫£ chi ti·∫øt l·ªói.
   * @param message   Th√¥ng b√°o l·ªói.
   * @param status    M√£ HTTP t∆∞∆°ng ·ª©ng.
   * @param <T>       Ki·ªÉu d·ªØ li·ªáu c·ªßa ph·∫£n h·ªìi.
   * @return `ResponseEntity<ResponseData<T>>` ch·ª©a th√¥ng tin l·ªói.
   */
  public static <T> ResponseEntity<ResponseData<T>> error(
      String code, String errorDesc, String message, HttpStatus status) {
    return error(code, errorDesc, message, null, status);
  }

  /**
   * **T·∫°o ph·∫£n h·ªìi l·ªói v·ªõi d·ªØ li·ªáu ƒëi k√®m (`error`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y tr·∫£ v·ªÅ `ResponseEntity` v·ªõi m√£ l·ªói HTTP, th√¥ng b√°o l·ªói v√† d·ªØ li·ªáu ƒëi
   * k√®m.</p>
   * <p>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * ResponseEntity<ResponseData<String>> response = ResponseUtils.error("500", "Internal Server Error", "L·ªói h·ªá th·ªëng", "Chi ti·∫øt l·ªói", HttpStatus.INTERNAL_SERVER_ERROR);
   * }
   * </pre>
   *
   * @param code      M√£ l·ªói.
   * @param errorDesc M√¥ t·∫£ chi ti·∫øt l·ªói.
   * @param message   Th√¥ng b√°o l·ªói.
   * @param data      D·ªØ li·ªáu ƒëi k√®m (n·∫øu c√≥).
   * @param status    M√£ HTTP t∆∞∆°ng ·ª©ng.
   * @param <T>       Ki·ªÉu d·ªØ li·ªáu c·ªßa ph·∫£n h·ªìi.
   * @return `ResponseEntity<ResponseData<T>>` ch·ª©a th√¥ng tin l·ªói v√† d·ªØ li·ªáu ƒëi k√®m.
   */
  public static <T> ResponseEntity<ResponseData<T>> error(
      String code, String errorDesc, String message, T data, HttpStatus status) {
    return ResponseEntity.status(status).body(getResponseDataError(code, errorDesc, message, data));
  }

  /**
   * **T·∫°o ƒë·ªëi t∆∞·ª£ng `ResponseData` ch·ª©a th√¥ng tin l·ªói (`getResponseDataError`)**
   *
   * @param code      M√£ l·ªói.
   * @param errorDesc M√¥ t·∫£ l·ªói.
   * @param message   Th√¥ng b√°o l·ªói.
   * @param data      D·ªØ li·ªáu ph·∫£n h·ªìi (n·∫øu c√≥).
   * @param <T>       Ki·ªÉu d·ªØ li·ªáu ph·∫£n h·ªìi.
   * @return `ResponseData<T>` ch·ª©a th√¥ng tin l·ªói.
   */
  public static <T> ResponseData<T> getResponseDataError(
      String code, String errorDesc, String message, T data) {
    return new ResponseData<T>().error(code, errorDesc, message, data);
  }
}
