package com.flowhub.base.annotations.validator;

import jakarta.validation.Constraint;
import jakarta.validation.Payload;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Repeatable;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import lombok.extern.slf4j.Slf4j;
import com.flowhub.base.annotations.AbstractDateRangeValidator;

import static java.lang.annotation.RetentionPolicy.RUNTIME;

/**
 * **Annotation `@StartBeforeEndDate`**
 *
 * <p>Annotation n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ki·ªÉm tra xem m·ªôt gi√° tr·ªã ng√†y/th·ªùi gian b·∫Øt ƒë·∫ßu c√≥ nh·ªè h∆°n
 * ho·∫∑c b·∫±ng gi√° tr·ªã ng√†y/th·ªùi gian k·∫øt th√∫c hay kh√¥ng.</p>
 *
 * <pre>
 * üìå C√°ch ho·∫°t ƒë·ªông:
 * 1. Nh·∫≠n gi√° tr·ªã t·ª´ `startField` v√† `endField`.
 * 2. Chuy·ªÉn ƒë·ªïi gi√° tr·ªã th√†nh `Temporal` (n·∫øu l√† `String` th√¨ parse theo format quy ƒë·ªãnh).
 * 3. So s√°nh gi√° tr·ªã b·∫Øt ƒë·∫ßu v·ªõi gi√° tr·ªã k·∫øt th√∫c.
 * 4. N·∫øu gi√° tr·ªã b·∫Øt ƒë·∫ßu l·ªõn h∆°n gi√° tr·ªã k·∫øt th√∫c (v√† `allowEqualDates` l√† `false`), b√°o l·ªói validation.
 * </pre>
 * <p>
 * **üìå C√°ch s·ª≠ d·ª•ng:**
 * <pre>
 * {@code
 * @StartBeforeEndDate(startField = "startDate", endField = "endDate", message = "Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i nh·ªè h∆°n ho·∫∑c b·∫±ng ng√†y k·∫øt th√∫c")
 * public class BookingRequest {
 *     private String startDate;
 *     private String endDate;
 * }
 * }
 * </pre>
 *
 * @author haidv
 * @version 1.0
 */
@Repeatable(StartBeforeEndDateGroup.class)
@Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE})
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = StartBeforeEndDate.Validator.class)
public @interface StartBeforeEndDate {

  String message() default "{validation.range.date.invalid}";

  Class<?>[] groups() default {};

  Class<? extends Payload>[] payload() default {};

  String startField();

  String endField();

  boolean allowEqualDates() default true; // Cho ph√©p ng√†y b·∫Øt ƒë·∫ßu b·∫±ng ng√†y k·∫øt th√∫c

  @Slf4j
  class Validator extends AbstractDateRangeValidator<StartBeforeEndDate> {

    @Override
    protected String getStartField(StartBeforeEndDate annotation) {
      return annotation.startField();
    }

    @Override
    protected String getEndField(StartBeforeEndDate annotation) {
      return annotation.endField();
    }

    @Override
    protected long getDurationLimit(StartBeforeEndDate annotation) {
      return 0;
    }

    @Override
    protected boolean getAllowEqual(StartBeforeEndDate annotation) {
      return annotation.allowEqualDates();
    }

    @Override
    protected String getMessage(StartBeforeEndDate annotation) {
      return annotation.message();
    }

    @Override
    protected boolean isValidDuration(long durationBetween) {
      return allowEqual ? durationBetween >= 0 : durationBetween > 0;
    }

    @Override
    protected String getPattern(StartBeforeEndDate annotation) {
      return "";
    }
  }
}
