package com.flowhub.base.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.logging.log4j.ThreadContext;
import org.springframework.context.MessageSource;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;
import com.flowhub.base.constant.RequestConstant;
import com.flowhub.base.data.ResponseUtils;
import com.flowhub.base.exception.BaseException;
import com.flowhub.base.exception.CommonErrorDef;
import com.flowhub.base.redis.TokenBlackListRepository;
import com.flowhub.base.utils.JsonUtils;
import com.flowhub.base.utils.RequestUtils;
import com.flowhub.base.utils.Snowflake;

/**
 * **L·ªõp `AuthenticationFilter` - X√°c th·ª±c JWT cho m·ªói request**
 *
 * <p>Filter n√†y x√°c th·ª±c JWT trong m·ªói request HTTP, ki·ªÉm tra token c√≥ h·ª£p l·ªá kh√¥ng
 * v√† thi·∫øt l·∫≠p `SecurityContextHolder` n·∫øu x√°c th·ª±c th√†nh c√¥ng.</p>
 * <p>
 * **üìå C√°ch ho·∫°t ƒë·ªông:**
 * <pre>
 * - N·∫øu request c√≥ JWT h·ª£p l·ªá, h·ªá th·ªëng s·∫Ω l·∫•y th√¥ng tin t·ª´ token v√† thi·∫øt l·∫≠p th√¥ng tin x√°c th·ª±c.
 * - N·∫øu token b·ªã v√¥ hi·ªáu h√≥a, s·∫Ω n√©m l·ªói `BaseException` v·ªõi `REFRESH_TOKEN_EXPIRED`.
 * - N·∫øu c√≥ l·ªói x√°c th·ª±c, h·ªá th·ªëng s·∫Ω tr·∫£ v·ªÅ JSON ch·ª©a th√¥ng tin l·ªói.
 * </pre>
 *
 * @author haidv
 * @version 1.0
 */
@Slf4j
@RequiredArgsConstructor
@Component
public class AuthenticationFilter extends OncePerRequestFilter {

  /** Token Provider ƒë·ªÉ x·ª≠ l√Ω JWT** */
  private final TokenProvider tokenProvider;

  /** Repository l∆∞u tr·ªØ danh s√°ch token b·ªã v√¥ hi·ªáu h√≥a** */
  private final TokenBlackListRepository tokenBlackListRepository;

  private final MessageSource messageSource;

  /**
   * **X√°c th·ª±c request d·ª±a tr√™n JWT (`doFilterInternal`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y th·ª±c hi·ªán x√°c th·ª±c JWT, ki·ªÉm tra token c√≥ h·ª£p l·ªá kh√¥ng,
   * ki·ªÉm tra xem token c√≥ b·ªã v√¥ hi·ªáu h√≥a kh√¥ng v√† thi·∫øt l·∫≠p th√¥ng tin x√°c th·ª±c v√†o
   * `SecurityContextHolder` n·∫øu h·ª£p l·ªá.</p>
   * <p>
   * **üìå C√°ch ho·∫°t ƒë·ªông:**
   * <pre>
   * - Ghi log th√¥ng tin request v√†o `ThreadContext` ƒë·ªÉ theo d√µi logging.
   * - L·∫•y JWT t·ª´ request b·∫±ng `getJwtFromRequest(request)`.
   * - N·∫øu request kh√¥ng n·∫±m trong danh s√°ch b·ªè qua (`IGNORE_AUTHENTICATION_PATTERN`), ti·∫øp t·ª•c x·ª≠ l√Ω.
   * - Gi·∫£i m√£ JWT ƒë·ªÉ l·∫•y th√¥ng tin user (`tokenProvider.getClaimsFromRSAToken()`).
   * - N·∫øu token ƒë√£ b·ªã v√¥ hi·ªáu h√≥a (`tokenBlackListRepository.find(claims.getSubject())`), n√©m l·ªói.
   * - N·∫øu h·ª£p l·ªá, t·∫°o ƒë·ªëi t∆∞·ª£ng `UserPrincipal` v√† thi·∫øt l·∫≠p v√†o `SecurityContextHolder`.
   * </pre>
   *
   * @param request     Request HTTP.
   * @param response    Response HTTP.
   * @param filterChain Chu·ªói filter ti·∫øp theo.
   * @throws ServletException N·∫øu c√≥ l·ªói Servlet.
   * @throws IOException      N·∫øu c√≥ l·ªói I/O.
   */
  @Override
  protected void doFilterInternal(
      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
      throws ServletException, IOException {
    try {
      // Ghi th√¥ng tin request v√†o ThreadContext
      var requestId = request.getHeader(RequestConstant.REQUEST_ID);
      ThreadContext.put(
          RequestConstant.REQUEST_ID,
          requestId == null ? String.valueOf(Snowflake.getInstance().nextId()) : requestId);
      ThreadContext.put(RequestConstant.CLIENT_IP, RequestUtils.extractClientIpAddress(request));
      ThreadContext.put(RequestConstant.LOCAL_IP, request.getLocalAddr());
      ThreadContext.put(RequestConstant.DEVICE_ID, request.getHeader(RequestConstant.DEVICE_ID));
      ThreadContext.put(RequestConstant.DEVICE_NAME,
                        request.getHeader(RequestConstant.DEVICE_NAME));
      ThreadContext.put(RequestConstant.DEVICE_TYPE,
                        request.getHeader(RequestConstant.DEVICE_TYPE));
      ThreadContext.put(RequestConstant.BROWSER_NAME,
                        request.getHeader(RequestConstant.BROWSER_NAME));
      ThreadContext.put(RequestConstant.APPLICATION_VERSION,
                        request.getHeader(RequestConstant.APPLICATION_VERSION));
      ThreadContext.put(RequestConstant.CLIENT_LANG,
                        request.getHeader(RequestConstant.CLIENT_LANG));

      // ƒê√°nh d·∫•u th·ªùi gian b·∫Øt ƒë·∫ßu x·ª≠ l√Ω request
      request.setAttribute(RequestConstant.REQUEST_TIME_START, System.currentTimeMillis());

      // X√≥a th√¥ng tin x√°c th·ª±c c≈©
      SecurityContextHolder.getContext().setAuthentication(null);

      // L·∫•y JWT t·ª´ request
      var jwt = getJwtFromRequest(request);
      if (StringUtils.hasText(jwt)
          && !RequestUtils.matches(request,
                                   Set.of(RequestConstant.getIgnoreAuthenticationPattern()))) {

        // Gi·∫£i m√£ JWT
        var claims =
            tokenProvider.getClaimsFromRSAToken(jwt.substring(RequestConstant.BEARER_PREFIX.length()));

        // Ki·ªÉm tra token c√≥ b·ªã v√¥ hi·ªáu h√≥a kh√¥ng
        ThreadContext.put(RequestConstant.SESSION_ID, claims.getSubject());
        if (tokenBlackListRepository.find(claims.getSubject()).isPresent()) {
          throw new BaseException(CommonErrorDef.REFRESH_TOKEN_EXPIRED);
        }

        // T·∫°o UserPrincipal v√† thi·∫øt l·∫≠p v√†o SecurityContext
        var userDetails = new UserPrincipal(claims.getSubject(),
                                            new HashMap<>(),
                                            new ArrayList<>());
        var authentication =
            new UsernamePasswordAuthenticationToken(userDetails,
                                                    null,
                                                    userDetails.getAuthorities());
        authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
        SecurityContextHolder.getContext().setAuthentication(authentication);
      }
    } catch (BaseException ex) {
      log.error("Could not set user authentication in security context", ex);
      response.setStatus(ex.getHttpStatus().value());
      response.setContentType(MediaType.APPLICATION_JSON_VALUE);
      response.setCharacterEncoding(StandardCharsets.UTF_8.name());
      var writer = response.getWriter();
      writer.println(JsonUtils.toJson(ResponseUtils.error(
          ex.getErrorCode(),
          ex.getMessage(),
          messageSource.getMessage(
              ex.getErrorCode(),
              ex.getMessageArg(),
              ex.getMessage(),
              RequestUtils.extractLocale()),
          ex.getHttpStatus()).getBody()));
      return;
    }
    filterChain.doFilter(request, response);
  }

  private String getJwtFromRequest(HttpServletRequest request) {
    var bearerToken = request.getHeader(RequestConstant.AUTHORIZATION);
    if (StringUtils.hasText(bearerToken) && bearerToken.startsWith(RequestConstant.BEARER_PREFIX)) {
      return bearerToken;
    }
    return null;
  }
}