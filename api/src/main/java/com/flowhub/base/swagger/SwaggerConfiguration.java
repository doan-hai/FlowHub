package com.flowhub.base.swagger;

import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.servers.Server;
import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.Operation;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.media.StringSchema;
import io.swagger.v3.oas.models.parameters.Parameter;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import org.springdoc.core.customizers.OperationCustomizer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.method.HandlerMethod;
import com.flowhub.base.constant.RequestConstant;
import com.flowhub.base.utils.Snowflake;
import com.flowhub.business.BusinessApplication;

/**
 * **L·ªõp `SwaggerConfiguration` - C·∫•u h√¨nh Swagger cho API**
 *
 * <p>L·ªõp n√†y c·∫•u h√¨nh Swagger OpenAPI 3.0 cho h·ªá th·ªëng, gi√∫p t·∫°o t√†i li·ªáu API t·ª± ƒë·ªông
 * v√† t√πy ch·ªânh c√°c th√¥ng tin header m·∫∑c ƒë·ªãnh khi s·ª≠ d·ª•ng Swagger UI.</p>
 * <pre>
 * **üìå C√°ch ho·∫°t ƒë·ªông:**
 * - Khi Swagger UI ho·∫∑c OpenAPI ƒë∆∞·ª£c kh·ªüi t·∫°o, h·ªá th·ªëng s·∫Ω s·ª≠ d·ª•ng c√°c Bean
 *   trong l·ªõp n√†y ƒë·ªÉ thi·∫øt l·∫≠p t√†i li·ªáu API.
 * - `customGlobalHeaders()` gi√∫p th√™m c√°c header m·∫∑c ƒë·ªãnh v√†o m·ªói API.
 * - `customOpenAPI()` ƒë·ªãnh nghƒ©a c√°c th√¥ng tin chung c·ªßa API v√† c·∫•u h√¨nh b·∫£o m·∫≠t.
 * </pre>
 * **üìå V√≠ d·ª• m·ªôt request header ƒë∆∞·ª£c t·ª± ƒë·ªông th√™m v√†o API:**
 * <pre>
 * {@code
 * GET /api/v1/resource
 * Headers:
 *   REQUEST_ID: 1234567890
 *   CLIENT_IP: 192.168.1.1
 *   CLIENT_TIME: 1700000000000
 *   APPLICATION_VERSION: 1.0.0
 *   AUTHORIZATION: Bearer abc123xyz
 * }
 * </pre>
 *
 * @author haidv
 * @version 1.0
 */
@Configuration
@OpenAPIDefinition(
    servers = {@Server(url = "${server.servlet.context-path}", description = "Default Server URL")})
public class SwaggerConfiguration {

  /**
   * **Th√™m c√°c header m·∫∑c ƒë·ªãnh v√†o t·∫•t c·∫£ API (`customGlobalHeaders`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y t·ª± ƒë·ªông th√™m c√°c th√¥ng tin v√†o header c·ªßa m·ªói API khi s·ª≠ d·ª•ng Swagger
   * UI.</p>
   * <p>
   * **üìå Header ƒë∆∞·ª£c th√™m v√†o:**
   * <pre>
   * - `REQUEST_ID`: ID request (t·∫°o t·ª± ƒë·ªông b·∫±ng `Snowflake`).
   * - `CLIENT_IP`: ƒê·ªãa ch·ªâ IP c·ªßa client.
   * - `CLIENT_TIME`: Th·ªùi gian g·ª≠i request (timestamp).
   * - `CLIENT_TIMEZONE`: M√∫i gi·ªù c·ªßa client.
   * - `DEVICE_ID`: ID c·ªßa thi·∫øt b·ªã (t√πy ch·ªçn).
   * - `DEVICE_NAME`: T√™n c·ªßa thi·∫øt b·ªã (t√πy ch·ªçn).
   * - `APPLICATION_VERSION`: Phi√™n b·∫£n ·ª©ng d·ª•ng.
   * - `DEVICE_TYPE`: Lo·∫°i thi·∫øt b·ªã (t√πy ch·ªçn).
   * - `CLIENT_LANG`: Ng√¥n ng·ªØ c·ªßa client (t√πy ch·ªçn).
   * </pre>
   *
   * @return `OperationCustomizer` gi√∫p th√™m header v√†o t·∫•t c·∫£ API.
   */
  @Bean
  public OperationCustomizer customGlobalHeaders() {
    return (Operation operation, HandlerMethod handlerMethod) -> {
      operation.addParametersItem(
          new Parameter()
              .in(ParameterIn.HEADER.toString())
              .schema(new StringSchema())
              .name(RequestConstant.REQUEST_ID)
              .example(Snowflake.getInstance().nextId())
              .required(true));
      operation.addParametersItem(
          new Parameter()
              .in(ParameterIn.HEADER.toString())
              .schema(new StringSchema())
              .name(RequestConstant.CLIENT_IP)
              .example("127.0.0.1")
              .required(true));
      operation.addParametersItem(
          new Parameter()
              .in(ParameterIn.HEADER.toString())
              .schema(new StringSchema())
              .name(RequestConstant.CLIENT_TIME)
              .example(System.currentTimeMillis())
              .required(true));
      operation.addParametersItem(
          new Parameter()
              .in(ParameterIn.HEADER.toString())
              .schema(new StringSchema())
              .name(RequestConstant.CLIENT_TIMEZONE)
              .example("Asia/Ho_Chi_Minh")
              .required(true));
      operation.addParametersItem(
          new Parameter()
              .in(ParameterIn.HEADER.toString())
              .schema(new StringSchema())
              .name(RequestConstant.DEVICE_ID)
              .example(Snowflake.getInstance().nextId())
              .required(false));
      operation.addParametersItem(
          new Parameter()
              .in(ParameterIn.HEADER.toString())
              .schema(new StringSchema())
              .name(RequestConstant.DEVICE_NAME)
              .example("HAIDV")
              .required(false));
      operation.addParametersItem(
          new Parameter()
              .in(ParameterIn.HEADER.toString())
              .schema(new StringSchema())
              .name(RequestConstant.APPLICATION_VERSION)
              .example("1.0.0")
              .required(true));
      operation.addParametersItem(
          new Parameter()
              .in(ParameterIn.HEADER.toString())
              .schema(new StringSchema())
              .name(RequestConstant.DEVICE_TYPE)
              .example("MacOS")
              .required(false));
      operation.addParametersItem(
          new Parameter()
              .in(ParameterIn.HEADER.toString())
              .schema(new StringSchema())
              .name(RequestConstant.CLIENT_LANG)
              .example("vi")
              .required(false));

      return operation;
    };
  }

  /**
   * **C·∫•u h√¨nh chung cho OpenAPI (`customOpenAPI`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y thi·∫øt l·∫≠p th√¥ng tin chung cho t√†i li·ªáu API v√† c·∫•u h√¨nh b·∫£o m·∫≠t.</p>
   * <p>
   * **üìå Ch·ª©c nƒÉng:** - Thi·∫øt l·∫≠p t√™n API v√† phi√™n b·∫£n t·ª´ `BusinessApplication.getApplicationName()`. -
   * ƒê·ªãnh nghƒ©a API Key (`Authorization`) trong header ƒë·ªÉ b·∫£o m·∫≠t API.
   * <p>
   * **üìå C·∫•u h√¨nh b·∫£o m·∫≠t:**
   * <pre>
   * {@code
   * securitySchemes:
   *   Authorization:
   *     type: apiKey
   *     in: header
   *     name: Authorization
   * }
   * </pre>
   *
   * @return ƒê·ªëi t∆∞·ª£ng `OpenAPI` ch·ª©a th√¥ng tin v√† c·∫•u h√¨nh b·∫£o m·∫≠t c·ªßa API.
   */
  @Bean
  public OpenAPI customOpenAPI() {
    return new OpenAPI()
        .info(new Info().title(BusinessApplication.getApplicationName()).version("1.0.0"))
        .components(
            new Components()
                .addSecuritySchemes(
                    RequestConstant.AUTHORIZATION,
                    new SecurityScheme()
                        .type(SecurityScheme.Type.APIKEY)
                        .in(SecurityScheme.In.HEADER)
                        .name(RequestConstant.AUTHORIZATION)))
        .addSecurityItem(new SecurityRequirement().addList(RequestConstant.AUTHORIZATION));
  }
}