package com.flowhub.base.utils;

import java.net.NetworkInterface;
import java.security.SecureRandom;
import java.time.Instant;
import java.util.Enumeration;
import lombok.Getter;
import lombok.Setter;

/**
 * **Snowflake Distributed ID Generator**
 *
 * <p>Snowflake l√† m·ªôt thu·∫≠t to√°n t·∫°o ID ph√¢n t√°n ƒë∆∞·ª£c l·∫•y c·∫£m h·ª©ng t·ª´ Twitter Snowflake.
 * N√≥ t·∫°o ra c√°c ID duy nh·∫•t theo th·ªùi gian v·ªõi c·∫•u tr√∫c nh∆∞ sau:</p>
 *
 * <pre>
 *  +------+----------------------+----------------+-----------+
 *  | Sign |     Timestamp        |   Node ID     | Sequence  |
 *  +------+----------------------+----------------+-----------+
 *  |  1b  |        41b           |      10b      |   12b     |
 *  +------+----------------------+----------------+-----------+
 * </pre>
 * <p><pre>
 * **C·∫•u tr√∫c ID (64-bit):**
 * - **1 bit d·∫•u (unused)**: Lu√¥n b·∫±ng `0`.
 * - **41 bit timestamp**: Th·ªùi gian t√≠nh t·ª´ epoch t√πy ch·ªânh (`customEpoch`).
 * - **10 bit node ID**: ƒê·ªãnh danh m√°y ch·ªß (ho·∫∑c container) trong h·ªá th·ªëng ph√¢n t√°n.
 * - **12 bit sequence**: B·ªô ƒë·∫øm ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≥ xung ƒë·ªôt trong c√πng m·ªôt millisecond.</pre>
 *
 * <p>üìå **L∆∞u √Ω:** L·ªõp n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ d√πng nh∆∞ m·ªôt Singleton.</p>
 *
 * @author haidv
 * @version 1.0
 */
@Setter
@Getter
public class Snowflake {

  /** Bit kh√¥ng s·ª≠ d·ª•ng (1 bit d·∫•u lu√¥n l√† 0). */
  private static final int UNUSED_BITS = 1;

  /** S·ªë bit d√†nh cho timestamp (41 bits). */
  private static final int EPOCH_BITS = 41;

  /** S·ªë bit d√†nh cho node ID (10 bits). */
  private static final int NODE_ID_BITS = 10;

  /** S·ªë bit d√†nh cho sequence (12 bits). */
  private static final int SEQUENCE_BITS = 12;

  /** Gi·ªõi h·∫°n t·ªëi ƒëa c·ªßa node ID (2^10 - 1 = 1023). */
  private static final long MAX_NODE_ID = (1L << NODE_ID_BITS) - 1;

  /** Gi·ªõi h·∫°n t·ªëi ƒëa c·ªßa sequence (2^12 - 1 = 4095). */
  private static final long MAX_SEQUENCE = (1L << SEQUENCE_BITS) - 1;

  /** M·ªëc th·ªùi gian t√πy ch·ªânh (Epoch m·∫∑c ƒë·ªãnh: 01-01-2015 00:00:00 UTC). */
  private static final long DEFAULT_CUSTOM_EPOCH = 1420070400000L;

  private static Snowflake instance;

  /** Node ID ƒë·∫°i di·ªán cho m√°y ch·ªß hi·ªán t·∫°i. */
  private long nodeId;

  /** Th·ªùi gian b·∫Øt ƒë·∫ßu c·ªßa Epoch t√πy ch·ªânh. */
  private long customEpoch;

  /** L∆∞u timestamp c·ªßa ID cu·ªëi c√πng ƒë∆∞·ª£c t·∫°o. */
  private volatile long lastTimestamp = -1L;

  /** B·ªô ƒë·∫øm sequence trong c√πng m·ªôt millisecond. */
  private volatile long sequence = 0L;

  private Snowflake() {
  }


  /**
   * **L·∫•y Snowflake instance (Singleton), t·ª± ƒë·ªông t·∫°o node ID.**
   *
   * @return Instance c·ªßa Snowflake.
   */
  public static Snowflake getInstance() {
    return getInstance(createNodeId());
  }


  /**
   * **L·∫•y Snowflake instance v·ªõi node ID do ng∆∞·ªùi d√πng cung c·∫•p.**
   *
   * @param nodeId Node ID c·ªßa m√°y ch·ªß.
   * @return Instance c·ªßa Snowflake.
   */
  public static Snowflake getInstance(long nodeId) {
    return getInstance(nodeId, DEFAULT_CUSTOM_EPOCH);
  }

  /**
   * **L·∫•y Snowflake instance v·ªõi node ID v√† epoch t√πy ch·ªânh.**
   *
   * @param nodeId      Node ID c·ªßa m√°y ch·ªß.
   * @param customEpoch Epoch t√πy ch·ªânh.
   * @return Instance c·ªßa Snowflake.
   */
  public static Snowflake getInstance(long nodeId, long customEpoch) {
    if (instance == null) {
      Snowflake snowflake = new Snowflake();
      snowflake.setCustomEpoch(customEpoch);
      snowflake.setNodeId(nodeId);
      instance = snowflake;
    }
    return instance;
  }

  /**
   * **T·∫°o node ID d·ª±a tr√™n ƒë·ªãa ch·ªâ MAC.**
   *
   * <pre>
   * - N·∫øu c√≥ th·ªÉ l·∫•y ƒë·ªãa ch·ªâ MAC, s·∫Ω s·ª≠ d·ª•ng hash c·ªßa n√≥.
   * - N·∫øu kh√¥ng th·ªÉ l·∫•y ƒë·ªãa ch·ªâ MAC, s·∫Ω t·∫°o s·ªë ng·∫´u nhi√™n. </pre>
   *
   * @return Node ID (0 ‚Üí 1023).
   */
  private static long createNodeId() {
    long nodeId;
    try {
      StringBuilder sb = new StringBuilder();
      Enumeration<NetworkInterface> networkInterfaces = NetworkInterface.getNetworkInterfaces();
      while (networkInterfaces.hasMoreElements()) {
        NetworkInterface networkInterface = networkInterfaces.nextElement();
        byte[] mac = networkInterface.getHardwareAddress();
        if (mac != null) {
          for (byte macPort : mac) {
            sb.append(String.format("%02X", macPort));
          }
        }
      }
      nodeId = sb.toString().hashCode();
    } catch (Exception ex) {
      nodeId = (new SecureRandom().nextInt());
    }
    nodeId = nodeId & MAX_NODE_ID;
    return nodeId;
  }

  /**
   * **T·∫°o ID ti·∫øp theo theo thu·∫≠t to√°n Snowflake.**
   *
   * <p>C√°ch ho·∫°t ƒë·ªông:</p>
   * <pre>
   * - L·∫•y timestamp hi·ªán t·∫°i (ƒë√£ tr·ª´ `customEpoch`).
   * - N·∫øu timestamp nh·ªè h∆°n `lastTimestamp`, h·ªá th·ªëng c√≥ l·ªói ƒë·ªìng h·ªì.
   * - N·∫øu timestamp b·∫±ng `lastTimestamp` (trong c√πng 1 millisecond):
   *      - TƒÉng `sequence`.
   *      - N·∫øu `sequence` v∆∞·ª£t qu√° gi·ªõi h·∫°n, ƒë·ª£i ƒë·∫øn millisecond ti·∫øp theo.
   * - N·∫øu timestamp kh√°c `lastTimestamp`, reset `sequence = 0`.
   * - C·∫≠p nh·∫≠t `lastTimestamp` v√† t·∫°o ID v·ªõi c·∫•u tr√∫c:
   *
   *   ID = (timestamp << (NODE_ID_BITS + SEQUENCE_BITS))
   *        | (nodeId << SEQUENCE_BITS)
   *        | sequence;
   *
   * <p><b>L∆∞u √Ω:</b></p>
   * - **ƒê·ªìng b·ªô h√≥a (`synchronized`)** ƒë·ªÉ tr√°nh xung ƒë·ªôt gi·ªØa c√°c lu·ªìng.
   * - **N·∫øu h·ªá th·ªëng l√πi th·ªùi gian (`clock rollback`), n√©m l·ªói `IllegalStateException`**.
   * - **N·∫øu `sequence` ƒë·∫°t gi·ªõi h·∫°n trong 1ms, ph·∫£i ƒë·ª£i sang millisecond ti·∫øp theo**.
   * </pre>
   *
   * @return ID duy nh·∫•t d·∫°ng `long`.
   * @throws IllegalStateException n·∫øu ƒë·ªìng h·ªì h·ªá th·ªëng l√πi v·ªÅ qu√° kh·ª©.
   */
  public synchronized long nextId() {
    // L·∫•y timestamp hi·ªán t·∫°i (t√≠nh t·ª´ customEpoch)
    long currentTimestamp = timestamp();

    // Ki·ªÉm tra n·∫øu ƒë·ªìng h·ªì h·ªá th·ªëng b·ªã l√πi th·ªùi gian
    if (currentTimestamp < lastTimestamp) {
      throw new IllegalStateException("Invalid System Clock!");
    }

    // N·∫øu timestamp gi·ªëng v·ªõi l·∫ßn tr∆∞·ªõc (c√πng 1ms)
    if (currentTimestamp == lastTimestamp) {
      sequence = (sequence + 1) & MAX_SEQUENCE; // TƒÉng sequence
      if (sequence == 0) {
        // N·∫øu sequence ƒë·∫°t gi·ªõi h·∫°n, ƒë·ª£i ƒë·∫øn millisecond ti·∫øp theo
        currentTimestamp = waitNextMillis(currentTimestamp);
      }
    } else {
      // N·∫øu timestamp thay ƒë·ªïi, reset sequence
      sequence = 0;
    }

    // C·∫≠p nh·∫≠t lastTimestamp ƒë·ªÉ tr√°nh tr√πng l·∫∑p
    lastTimestamp = currentTimestamp;

    // T·∫°o ID b·∫±ng c√°ch d·ªãch bit timestamp, nodeId v√† sequence
    return currentTimestamp << (NODE_ID_BITS + SEQUENCE_BITS)
        | (nodeId << SEQUENCE_BITS)
        | sequence;
  }

  /**
   * **L·∫•y timestamp hi·ªán t·∫°i (theo milliseconds), ƒë√£ ƒëi·ªÅu ch·ªânh theo custom epoch.**
   *
   * @return Timestamp hi·ªán t·∫°i.
   */
  private long timestamp() {
    return Instant.now().toEpochMilli() - customEpoch;
  }

  /**
   * **Ch·ªù ƒë·∫øn millisecond ti·∫øp theo n·∫øu sequence b·ªã tr√†n.**
   *
   * @param currentTimestamp Timestamp hi·ªán t·∫°i.
   * @return Timestamp m·ªõi.
   */
  private long waitNextMillis(long currentTimestamp) {
    while (currentTimestamp == lastTimestamp) {
      currentTimestamp = timestamp();
    }
    return currentTimestamp;
  }

  /**
   * **Ph√¢n t√≠ch ID ƒë·ªÉ l·∫•y c√°c th√†nh ph·∫ßn timestamp, node ID, v√† sequence.**
   *
   * @param id ID c·∫ßn ph√¢n t√≠ch.
   * @return M·∫£ng `{timestamp, nodeId, sequence}`.
   */
  public long[] parse(long id) {
    long maskNodeId = ((1L << NODE_ID_BITS) - 1) << SEQUENCE_BITS;
    long maskSequence = (1L << SEQUENCE_BITS) - 1;

    long timestamp = (id >> (NODE_ID_BITS + SEQUENCE_BITS)) + customEpoch;
    long extractNodeId = (id & maskNodeId) >> SEQUENCE_BITS;
    long extractSequence = id & maskSequence;

    return new long[]{timestamp, extractNodeId, extractSequence};
  }

  @Override
  public String toString() {
    return "Snowflake Settings [EPOCH_BITS="
        + EPOCH_BITS
        + ", NODE_ID_BITS="
        + NODE_ID_BITS
        + ", SEQUENCE_BITS="
        + SEQUENCE_BITS
        + ", CUSTOM_EPOCH="
        + customEpoch
        + ", NodeId="
        + nodeId
        + "]";
  }
}
