package com.flowhub.base.exception;

import jakarta.validation.ConstraintViolation;
import jakarta.validation.ConstraintViolationException;

import com.fasterxml.jackson.databind.JsonMappingException;
import feign.FeignException;
import io.github.resilience4j.ratelimiter.RequestNotPermitted;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.context.MessageSource;
import org.springframework.context.support.DefaultMessageSourceResolvable;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.http.converter.HttpMessageNotWritableException;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.validation.FieldError;
import org.springframework.web.HttpMediaTypeNotAcceptableException;
import org.springframework.web.HttpMediaTypeNotSupportedException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.MissingPathVariableException;
import org.springframework.web.bind.MissingRequestHeaderException;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.ServletRequestBindingException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.method.annotation.HandlerMethodValidationException;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;
import org.springframework.web.multipart.support.MissingServletRequestPartException;
import org.springframework.web.servlet.NoHandlerFoundException;
import com.flowhub.base.data.ResponseData;
import com.flowhub.base.data.ResponseUtils;
import com.flowhub.base.utils.JsonUtils;
import com.flowhub.base.utils.RequestUtils;

import static com.flowhub.base.exception.CommonErrorDef.ARGUMENT_NOT_VALID;
import static com.flowhub.base.exception.CommonErrorDef.ARGUMENT_TYPE_MISMATCH;
import static com.flowhub.base.exception.CommonErrorDef.BAD_REQUEST;
import static com.flowhub.base.exception.CommonErrorDef.DATA_INTEGRITY_VIOLATION;
import static com.flowhub.base.exception.CommonErrorDef.EXECUTE_THIRTY_SERVICE_ERROR;
import static com.flowhub.base.exception.CommonErrorDef.FORBIDDEN;
import static com.flowhub.base.exception.CommonErrorDef.HTTP_MESSAGE_NOT_READABLE;
import static com.flowhub.base.exception.CommonErrorDef.INTERNAL_SERVER_ERROR;
import static com.flowhub.base.exception.CommonErrorDef.MEDIA_TYPE_NOT_ACCEPTABLE;
import static com.flowhub.base.exception.CommonErrorDef.METHOD_NOT_ALLOWED;
import static com.flowhub.base.exception.CommonErrorDef.MISSING_REQUEST_HEADER;
import static com.flowhub.base.exception.CommonErrorDef.MISSING_REQUEST_PARAMETER;
import static com.flowhub.base.exception.CommonErrorDef.MISSING_REQUEST_PATH;
import static com.flowhub.base.exception.CommonErrorDef.NOT_FOUND;
import static com.flowhub.base.exception.CommonErrorDef.TOO_MANY_REQUESTS;
import static com.flowhub.base.exception.CommonErrorDef.UNSUPPORTED_MEDIA_TYPE;

/**
 * **L·ªõp `RestExceptionHandler` - X·ª≠ l√Ω ngo·∫°i l·ªá to√†n c·ª•c trong API**
 *
 * <p>L·ªõp n√†y s·ª≠ d·ª•ng `@RestControllerAdvice` ƒë·ªÉ x·ª≠ l√Ω c√°c ngo·∫°i l·ªá ph√°t sinh
 * trong h·ªá th·ªëng, gi√∫p chu·∫©n h√≥a ph·∫£n h·ªìi l·ªói v√† ghi log l·ªói chi ti·∫øt.</p>
 * <p>
 * **üìå C√°ch ho·∫°t ƒë·ªông:**
 * <p>Khi x·∫£y ra l·ªói trong API, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông g·ªçi `RestExceptionHandler`,
 * sau ƒë√≥ h·ªá th·ªëng s·∫Ω:</p>
 * <ul>
 *   <li>üìå X√°c ƒë·ªãnh lo·∫°i l·ªói (request, server, x√°c th·ª±c).</li>
 *   <li>üìå Chuy·ªÉn l·ªói th√†nh ph·∫£n h·ªìi JSON chu·∫©n.</li>
 *   <li>üìå Ghi log chi ti·∫øt l·ªói.</li>
 *   <li>üìå Tr·∫£ v·ªÅ m√£ tr·∫°ng th√°i HTTP ph√π h·ª£p.</li>
 * </ul>
 * <p>
 * **üìå V√≠ d·ª• ph·∫£n h·ªìi JSON khi x·∫£y ra l·ªói:**
 * <pre>
 * {
 *     "errorCode": "CM_0004",
 *     "message": "Request kh√¥ng h·ª£p l·ªá",
 *     "detailedMessage": "Tr∆∞·ªùng 'email' kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
 *     "data": null
 * }
 * </pre>
 *
 * @author haidv
 * @version 1.0
 */
@Slf4j
@RestControllerAdvice
@RequiredArgsConstructor
public class RestExceptionHandler {

  private final MessageSource messageSource;

  /**
   * **X·ª≠ l√Ω l·ªói thi·∫øu tham s·ªë trong request (`handleMissingServletRequestParameter`)**
   *
   * @param ex Ngo·∫°i l·ªá `MissingServletRequestParameterException`
   * @return Ph·∫£n h·ªìi l·ªói d·∫°ng JSON v·ªõi m√£ l·ªói `MISSING_REQUEST_PARAMETER`
   */
  @SuppressWarnings("unchecked")
  @ExceptionHandler(MissingServletRequestParameterException.class)
  public ResponseEntity<Object> handleMissingServletRequestParameter(
      MissingServletRequestParameterException ex) {
    log.error("handleMissingServletRequestParameter: {}", ex.getMessage());
    return this.handleError(MISSING_REQUEST_PARAMETER,
                            new Object[]{ex.getParameterType(), ex.getParameterName()},
                            ex.getMessage());
  }

  /**
   * **X·ª≠ l√Ω l·ªói thi·∫øu ph·∫ßn d·ªØ li·ªáu trong request (`handleMissingServletRequestPart`)**
   *
   * <p>X·∫£y ra khi m·ªôt `multipart` request y√™u c·∫ßu m·ªôt ph·∫ßn d·ªØ li·ªáu (file ho·∫∑c form-data)
   * nh∆∞ng kh√¥ng ƒë∆∞·ª£c g·ª≠i l√™n.</p>
   *
   * @param ex Ngo·∫°i l·ªá `MissingServletRequestPartException`
   * @return Ph·∫£n h·ªìi l·ªói v·ªõi m√£ l·ªói `MISSING_REQUEST_PARAMETER`
   */
  @SuppressWarnings("unchecked")
  @ExceptionHandler(MissingServletRequestPartException.class)
  public ResponseEntity<Object> handleMissingServletRequestPart(
      MissingServletRequestPartException ex) {
    log.error("handleMissingServletRequestPart: {}", ex.getMessage());
    return this.handleError(MISSING_REQUEST_PARAMETER,
                            new Object[]{"request part", ex.getRequestPartName()},
                            ex.getMessage());
  }

  /**
   * **X·ª≠ l√Ω l·ªói request c√≥ header b·ªã thi·∫øu (`handleServletRequestBindingException`)**
   *
   * @param ex Ngo·∫°i l·ªá `ServletRequestBindingException`
   * @return Ph·∫£n h·ªìi l·ªói v·ªõi m√£ l·ªói `MISSING_REQUEST_HEADER`
   */
  @SuppressWarnings("unchecked")
  @ExceptionHandler(ServletRequestBindingException.class)
  public ResponseEntity<Object> handleServletRequestBindingException(
      ServletRequestBindingException ex) {
    log.error("handleServletRequestBindingException: {}", ex.getMessage());
    return this.handleError(MISSING_REQUEST_HEADER,
                            new Object[]{((MissingRequestHeaderException) ex).getHeaderName()},
                            ex.getMessage());
  }

  /**
   * **X·ª≠ l√Ω l·ªói lo·∫°i d·ªØ li·ªáu kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ (`handleHttpMediaTypeNotSupported`)**
   *
   * <p>X·∫£y ra khi client g·ª≠i request v·ªõi `Content-Type` kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.</p>
   *
   * @param ex Ngo·∫°i l·ªá `HttpMediaTypeNotSupportedException`
   * @return Ph·∫£n h·ªìi l·ªói v·ªõi m√£ l·ªói `UNSUPPORTED_MEDIA_TYPE`
   */
  @SuppressWarnings("unchecked")
  @ExceptionHandler(HttpMediaTypeNotSupportedException.class)
  protected ResponseEntity<Object> handleHttpMediaTypeNotSupported(
      HttpMediaTypeNotSupportedException ex) {
    log.error("handleHttpMediaTypeNotSupported: {}", ex.getMessage());
    return this.handleError(UNSUPPORTED_MEDIA_TYPE, ex.getMessage());
  }

  /**
   * **X·ª≠ l√Ω l·ªói ph∆∞∆°ng th·ª©c HTTP kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ (`handleHttpRequestMethodNotSupported`)**
   *
   * <p>X·∫£y ra khi client g·ª≠i request v·ªõi ph∆∞∆°ng th·ª©c HTTP kh√¥ng h·ª£p l·ªá cho endpoint.</p>
   *
   * @param ex Ngo·∫°i l·ªá `HttpRequestMethodNotSupportedException`
   * @return Ph·∫£n h·ªìi l·ªói v·ªõi m√£ l·ªói `METHOD_NOT_ALLOWED`
   */
  @SuppressWarnings("unchecked")
  @ExceptionHandler(HttpRequestMethodNotSupportedException.class)
  protected ResponseEntity<Object> handleHttpRequestMethodNotSupported(
      HttpRequestMethodNotSupportedException ex) {
    log.error("handleHttpRequestMethodNotSupported: {}", ex.getMessage());
    return this.handleError(METHOD_NOT_ALLOWED, ex.getMessage());
  }

  /**
   * **X·ª≠ l√Ω l·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá (`handleMethodArgumentNotValid`)**
   *
   * @param ex Ngo·∫°i l·ªá `MethodArgumentNotValidException`
   * @return Ph·∫£n h·ªìi l·ªói v·ªõi danh s√°ch l·ªói chi ti·∫øt.
   */
  @SuppressWarnings("unchecked")
  @ExceptionHandler(MethodArgumentNotValidException.class)
  protected ResponseEntity<Object> handleMethodArgumentNotValid(
      MethodArgumentNotValidException ex) {
    log.error("handleMethodArgumentNotValid: {}", ex.getMessage());
    return this.handleError(ARGUMENT_NOT_VALID, null, this.getSubErrors(ex), ex.getMessage());
  }

  /**
   * **X·ª≠ l√Ω l·ªói x√°c th·ª±c d·ªØ li·ªáu tham s·ªë trong controller
   * (`handleHandlerMethodValidationException`)**
   *
   * <p>X·∫£y ra khi m·ªôt ph∆∞∆°ng th·ª©c handler nh·∫≠n ƒë∆∞·ª£c tham s·ªë kh√¥ng h·ª£p l·ªá do validation.</p>
   *
   * @param ex Ngo·∫°i l·ªá `HandlerMethodValidationException`
   * @return Ph·∫£n h·ªìi l·ªói v·ªõi m√£ l·ªói `ARGUMENT_NOT_VALID`
   */
  @SuppressWarnings("unchecked")
  @ExceptionHandler(HandlerMethodValidationException.class)
  protected ResponseEntity<Object> handleHandlerMethodValidationException(
      HandlerMethodValidationException ex) {
    log.error("handleHandlerMethodValidationException: {}", ex.getMessage());
    return this.handleError(ARGUMENT_NOT_VALID, null, this.getSubErrors(ex), ex.getMessage());
  }

  /**
   * **X·ª≠ l√Ω l·ªói qu√° nhi·ªÅu y√™u c·∫ßu (`handleRequestNotPermittedException`)**
   *
   * <p>X·∫£y ra khi ng∆∞·ªùi d√πng g·ª≠i qu√° nhi·ªÅu request trong m·ªôt kho·∫£ng th·ªùi gian ng·∫Øn,
   * vi ph·∫°m gi·ªõi h·∫°n t·∫ßn su·∫•t c·ªßa h·ªá th·ªëng.</p>
   *
   * @param ex Ngo·∫°i l·ªá `RequestNotPermitted`
   * @return Ph·∫£n h·ªìi l·ªói v·ªõi m√£ l·ªói `TOO_MANY_REQUESTS`
   */
  @SuppressWarnings("unchecked")
  @ExceptionHandler(RequestNotPermitted.class)
  protected ResponseEntity<Object> handleRequestNotPermittedException(RequestNotPermitted ex) {
    log.error("handleRequestNotPermittedException: {}", ex.getMessage());
    return this.handleError(TOO_MANY_REQUESTS, null, null, ex.getMessage());
  }

  /**
   * **X·ª≠ l√Ω l·ªói kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu t·ª´ request (`handleHttpMessageNotReadable`)**
   *
   * <p>X·∫£y ra khi request body c√≥ ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng th·ªÉ parse ƒë∆∞·ª£c th√†nh
   * object.</p>
   * <p>
   * **üìå C√°ch ho·∫°t ƒë·ªông:**
   * <ul>
   *   <li>üìå Ghi log l·ªói ƒë·ªÉ theo d√µi nguy√™n nh√¢n.</li>
   *   <li>üìå N·∫øu nguy√™n nh√¢n l·ªói l√† `JsonMappingException`, ki·ªÉm tra xem c√≥ ph·∫£i do ƒë·ªãnh d·∫°ng ng√†y gi·ªù sai.</li>
   *   <li>üìå N·∫øu c√≥ `DateTimeFormatException`, t·∫°o danh s√°ch l·ªói chi ti·∫øt v·ªõi th√¥ng tin tr∆∞·ªùng v√† gi√° tr·ªã l·ªói.</li>
   *   <li>üìå N·∫øu kh√¥ng ph·∫£i l·ªói v·ªÅ ng√†y gi·ªù, tr·∫£ v·ªÅ ph·∫£n h·ªìi l·ªói chu·∫©n `HTTP_MESSAGE_NOT_READABLE`.</li>
   * </ul>
   * <p>
   * **üìå V√≠ d·ª• t√¨nh hu·ªëng l·ªói:**
   * - Ng∆∞·ªùi d√πng g·ª≠i request c√≥ `createdDate: "31-02-2023"` (kh√¥ng h·ª£p l·ªá).
   * - H·ªá th·ªëng s·∫Ω n√©m `DateTimeFormatException` v√† ph·∫£n h·ªìi l·ªói nh∆∞ sau:
   *
   * <pre>
   * {
   *     "errorCode": "ARGUMENT_NOT_VALID",
   *     "message": "Invalid date format",
   *     "detailedMessage": "Tr∆∞·ªùng 'createdDate' c√≥ gi√° tr·ªã '31-02-2023' kh√¥ng h·ª£p l·ªá",
   *     "data": null
   * }
   * </pre>
   *
   * @param ex Ngo·∫°i l·ªá `HttpMessageNotReadableException`
   * @return Ph·∫£n h·ªìi l·ªói v·ªõi m√£ l·ªói `HTTP_MESSAGE_NOT_READABLE`
   */
  @SuppressWarnings("unchecked")
  @ExceptionHandler(HttpMessageNotReadableException.class)
  protected ResponseEntity<Object> handleHttpMessageNotReadable(
      HttpMessageNotReadableException ex) {
    log.error("handleHttpMessageNotReadable: {}", ex.getMessage());
    if (ex.getCause() instanceof JsonMappingException jsonMappingException
        && jsonMappingException.getCause() instanceof DateTimeFormatException dateTimeFormatException) {
      return this.handleError(ARGUMENT_NOT_VALID,
                              null,
                              List.of(new SubError(dateTimeFormatException.getField(),
                                                   dateTimeFormatException.getValue(),
                                                   dateTimeFormatException.getMessage())),
                              ex.getMessage());
    }
    return this.handleError(HTTP_MESSAGE_NOT_READABLE, ex.getMessage());
  }

  @ExceptionHandler(DateTimeFormatException.class)
  protected ResponseEntity<Object> handleHttpMessageNotReadable(
      DateTimeFormatException ex) {
    log.error("handleHttpMessageNotReadable: {}", ex.getMessage());
    return this.handleError(ARGUMENT_NOT_VALID,
                            null,
                            List.of(new SubError(ex.getField(),
                                                 ex.getValue(),
                                                 ex.getMessage())),
                            ex.getMessage());
  }

  /**
   * **X·ª≠ l√Ω l·ªói kh√¥ng th·ªÉ ghi d·ªØ li·ªáu ra response (`handleHttpMessageNotWritable`)**
   *
   * <p>X·∫£y ra khi h·ªá th·ªëng g·∫∑p l·ªói trong qu√° tr√¨nh serialize d·ªØ li·ªáu response.</p>
   *
   * @param ex Ngo·∫°i l·ªá `HttpMessageNotWritableException`
   * @return Ph·∫£n h·ªìi l·ªói v·ªõi m√£ l·ªói `BAD_REQUEST`
   */
  @SuppressWarnings("unchecked")
  @ExceptionHandler(HttpMessageNotWritableException.class)
  protected ResponseEntity<Object> handleHttpMessageNotWritable(
      HttpMessageNotWritableException ex) {
    log.error("handleHttpMessageNotWritable: {}", ex.getMessage());
    return this.handleError(BAD_REQUEST, ex.getMessage());
  }

  /**
   * **X·ª≠ l√Ω l·ªói kh√¥ng t√¨m th·∫•y endpoint (`handleNoHandlerFoundException`)**
   *
   * <p>X·∫£y ra khi client g·ª≠i request ƒë·∫øn m·ªôt endpoint kh√¥ng t·ªìn t·∫°i.</p>
   *
   * @param ex Ngo·∫°i l·ªá `NoHandlerFoundException`
   * @return Ph·∫£n h·ªìi l·ªói v·ªõi m√£ l·ªói `NOT_FOUND`
   */
  @SuppressWarnings("unchecked")
  @ExceptionHandler(NoHandlerFoundException.class)
  protected ResponseEntity<Object> handleNoHandlerFoundException(NoHandlerFoundException ex) {
    log.error("handleNoHandlerFoundException: {}", ex.getMessage());
    return this.handleError(NOT_FOUND,
                            new Object[]{ex.getHttpMethod(), ex.getRequestURL()},
                            ex.getMessage());
  }

  /**
   * **X·ª≠ l√Ω l·ªói ki·ªÉu d·ªØ li·ªáu kh√¥ng th·ªÉ ch·∫•p nh·∫≠n (`handleHttpMediaTypeNotAcceptable`)**
   *
   * <p>X·∫£y ra khi client y√™u c·∫ßu m·ªôt `Accept` header kh√¥ng ph√π h·ª£p v·ªõi server.</p>
   *
   * @param ex Ngo·∫°i l·ªá `HttpMediaTypeNotAcceptableException`
   * @return Ph·∫£n h·ªìi l·ªói v·ªõi m√£ l·ªói `MEDIA_TYPE_NOT_ACCEPTABLE`
   */
  @SuppressWarnings("unchecked")
  @ExceptionHandler(HttpMediaTypeNotAcceptableException.class)
  protected ResponseEntity<Object> handleHttpMediaTypeNotAcceptable(
      HttpMediaTypeNotAcceptableException ex) {
    log.error("handleHttpMediaTypeNotAcceptable: {}", ex.getMessage());
    return this.handleError(MEDIA_TYPE_NOT_ACCEPTABLE, ex.getMessage());
  }

  /**
   * **X·ª≠ l√Ω l·ªói vi ph·∫°m t√≠nh to√†n v·∫πn d·ªØ li·ªáu (`handleDataIntegrityViolation`)**
   *
   * <p>X·∫£y ra khi c√≥ xung ƒë·ªôt d·ªØ li·ªáu, ch·∫≥ng h·∫°n nh∆∞ r√†ng bu·ªôc duy nh·∫•t ho·∫∑c kh√≥a ngo·∫°i.</p>
   *
   * @param ex Ngo·∫°i l·ªá `DataIntegrityViolationException`
   * @return Ph·∫£n h·ªìi l·ªói v·ªõi m√£ l·ªói `DATA_INTEGRITY_VIOLATION`
   */
  @SuppressWarnings("unchecked")
  @ExceptionHandler(DataIntegrityViolationException.class)
  protected ResponseEntity<Object> handleDataIntegrityViolation(
      DataIntegrityViolationException ex) {
    log.error("handleDataIntegrityViolation: {}", ex.getMessage(), ex);
    return this.handleError(DATA_INTEGRITY_VIOLATION, ex.getMessage());
  }

  /**
   * **X·ª≠ l√Ω l·ªói quy·ªÅn truy c·∫≠p (`handleAccessDeniedException`)**
   *
   * @param ex Ngo·∫°i l·ªá `AccessDeniedException`
   * @return Ph·∫£n h·ªìi l·ªói v·ªõi m√£ l·ªói `FORBIDDEN`
   */
  @SuppressWarnings("unchecked")
  @ExceptionHandler(AccessDeniedException.class)
  protected ResponseEntity<Object> handleAccessDeniedException(AccessDeniedException ex) {
    log.error("handleAccessDeniedException: {}", ex.getMessage());
    return this.handleError(FORBIDDEN, ex.getMessage());
  }

  /**
   * **X·ª≠ l√Ω l·ªói sai ki·ªÉu d·ªØ li·ªáu c·ªßa tham s·ªë (`handleMethodArgumentTypeMismatch`)**
   *
   * <p>X·∫£y ra khi m·ªôt tham s·ªë c·ªßa request kh√¥ng ƒë√∫ng ki·ªÉu d·ªØ li·ªáu mong ƒë·ª£i.</p>
   *
   * @param ex Ngo·∫°i l·ªá `MethodArgumentTypeMismatchException`
   * @return Ph·∫£n h·ªìi l·ªói v·ªõi m√£ l·ªói `ARGUMENT_TYPE_MISMATCH`
   */
  @SuppressWarnings("unchecked")
  @ExceptionHandler(MethodArgumentTypeMismatchException.class)
  protected ResponseEntity<Object> handleMethodArgumentTypeMismatch(
      MethodArgumentTypeMismatchException ex) {
    log.error("handleMethodArgumentTypeMismatch: {}", ex.getMessage());
    return this.handleError(ARGUMENT_TYPE_MISMATCH,
                            new Object[]{ex.getRequiredType(), ex.getName()},
                            ex.getMessage());
  }

  /**
   * **X·ª≠ l√Ω ngo·∫°i l·ªá chung c·ªßa h·ªá th·ªëng (`handleBaseException`)**
   *
   * <p>X·∫£y ra khi h·ªá th·ªëng n√©m ra m·ªôt ngo·∫°i l·ªá `BaseException` do l·ªói nghi·ªáp v·ª•.</p>
   * <p>
   * **üìå C√°ch ho·∫°t ƒë·ªông:**
   * <ul>
   *   <li>üìå L·∫•y m√£ l·ªói (`errorCode`) v√† tr·∫°ng th√°i HTTP (`httpStatus`) t·ª´ `BaseException`.</li>
   *   <li>üìå S·ª≠ d·ª•ng `MessageSource` ƒë·ªÉ l·∫•y th√¥ng ƒëi·ªáp l·ªói ph√π h·ª£p v·ªõi ng√¥n ng·ªØ c·ªßa ng∆∞·ªùi d√πng.</li>
   *   <li>üìå Ghi log chi ti·∫øt l·ªói v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi chu·∫©n.</li>
   * </ul>
   *
   * @param ex Ngo·∫°i l·ªá `BaseException`
   * @return Ph·∫£n h·ªìi l·ªói v·ªõi m√£ l·ªói c·ª• th·ªÉ t·ª´ `BaseException`
   */
  @ExceptionHandler(BaseException.class)
  protected ResponseEntity<ResponseData<Object>> handleBaseException(BaseException ex) {
    log.error("handleBaseException: {}", ex.getLocalizedMessage(), ex);
    List<SubError> subErrors = null;
    var errorCode = ex.getErrorCode();
    HttpStatus httpStatus = ex.getHttpStatus();
    return ResponseUtils.error(errorCode,
                               ex.getMessage(),
                               messageSource.getMessage(errorCode,
                                                        ex.getMessageArg(),
                                                        ex.getMessage(),
                                                        RequestUtils.extractLocale()),
                               subErrors,
                               httpStatus);
  }

  /**
   * **X·ª≠ l√Ω l·ªói khi g·ªçi API b√™n th·ª© ba (`handleHttpClientErrorException`)**
   *
   * <p>X·∫£y ra khi h·ªá th·ªëng g·ª≠i request ƒë·∫øn m·ªôt d·ªãch v·ª• b√™n ngo√†i v√† nh·∫≠n ph·∫£n h·ªìi l·ªói.</p>
   *
   * @param ex Ngo·∫°i l·ªá `HttpClientErrorException`
   * @return Ph·∫£n h·ªìi l·ªói v·ªõi m√£ l·ªói `EXECUTE_THIRTY_SERVICE_ERROR`
   */
  @SuppressWarnings("unchecked")
  @ExceptionHandler(HttpClientErrorException.class)
  protected ResponseEntity<Object> handleHttpClientErrorException(HttpClientErrorException ex) {
    log.error("handleHttpClientErrorException: {}", ex.getLocalizedMessage(), ex);
    return this.handleError(EXECUTE_THIRTY_SERVICE_ERROR, ex.getMessage());
  }

  /**
   * **X·ª≠ l√Ω l·ªói vi ph·∫°m r√†ng bu·ªôc d·ªØ li·ªáu (`handleConstraintViolationException`)**
   *
   * <p>X·∫£y ra khi m·ªôt gi√° tr·ªã nh·∫≠p v√†o kh√¥ng tu√¢n theo r√†ng bu·ªôc validation c·ªßa Hibernate
   * Validator.</p>
   *
   * @param ex Ngo·∫°i l·ªá `ConstraintViolationException`
   * @return Ph·∫£n h·ªìi l·ªói v·ªõi m√£ l·ªói `ARGUMENT_NOT_VALID`
   */
  @SuppressWarnings("unchecked")
  @ExceptionHandler(ConstraintViolationException.class)
  protected ResponseEntity<Object> handleConstraintViolationException(
      ConstraintViolationException ex) {
    log.error("handleConstraintViolationException: {}", ex.getLocalizedMessage(), ex);
    return this.handleError(ARGUMENT_NOT_VALID, null, getSubErrors(ex), ex.getMessage());
  }

  /**
   * **X·ª≠ l√Ω l·ªói khi g·ªçi API b√™n th·ª© ba b·∫±ng Feign Client (`handleFeignException`)**
   *
   * <p>X·∫£y ra khi h·ªá th·ªëng g·ªçi m·ªôt service b√™n ngo√†i qua Feign Client v√† nh·∫≠n l·ªói.</p>
   *
   * @param ex Ngo·∫°i l·ªá `FeignException`
   * @return Ph·∫£n h·ªìi l·ªói d·ª±a tr√™n n·ªôi dung ph·∫£n h·ªìi t·ª´ service b√™n ngo√†i ho·∫∑c l·ªói chung.
   */
  @SuppressWarnings({"unchecked", "rawtypes"})
  @ExceptionHandler(FeignException.class)
  protected ResponseEntity<ResponseData<Object>> handleFeignException(FeignException ex) {
    log.error("handleFeignException: {}", ex.getLocalizedMessage(), ex);
    if (!StringUtils.isEmpty(ex.contentUTF8())) {
      log.error("FeignException content: {}", ex.contentUTF8());
      ResponseData responseData = JsonUtils.fromJson(ex.contentUTF8(), ResponseData.class);
      if (responseData != null) {
        return ResponseUtils.error(responseData.getCode(),
                                   responseData.getMessage(),
                                   null,
                                   HttpStatus.resolve(ex.status()));
      }
    }
    return this.handleError(INTERNAL_SERVER_ERROR, null, null);
  }

  /**
   * **X·ª≠ l√Ω l·ªói thi·∫øu bi·∫øn ƒë∆∞·ªùng d·∫´n (`handleMissingPathVariable`)**
   *
   * <p>X·∫£y ra khi m·ªôt bi·∫øn trong `@PathVariable` b·ªã thi·∫øu trong URL request.</p>
   *
   * @param ex Ngo·∫°i l·ªá `MissingPathVariableException`
   * @return Ph·∫£n h·ªìi l·ªói v·ªõi m√£ l·ªói `MISSING_REQUEST_PATH`
   */
  @SuppressWarnings("unchecked")
  @ExceptionHandler(MissingPathVariableException.class)
  protected ResponseEntity<Object> handleMissingPathVariable(MissingPathVariableException ex) {
    log.error("handleMissingPathVariable: {}", ex.getLocalizedMessage());
    return this.handleError(MISSING_REQUEST_PATH,
                            new Object[]{ex.getVariableName()},
                            ex.getMessage());
  }

  /**
   * **X·ª≠ l√Ω l·ªói h·ªá th·ªëng chung (`handleAllException`)**
   *
   * @param ex Ngo·∫°i l·ªá chung
   * @return Ph·∫£n h·ªìi l·ªói v·ªõi m√£ l·ªói `INTERNAL_SERVER_ERROR`
   */
  @SuppressWarnings("unchecked")
  @ExceptionHandler(Exception.class)
  protected ResponseEntity<Object> handleAllException(Exception ex) {
    log.error("handleAllException: {}", ex.getLocalizedMessage(), ex);
    return this.handleError(INTERNAL_SERVER_ERROR, ex.getMessage());
  }

  /**
   * **T·∫°o ph·∫£n h·ªìi l·ªói chu·∫©n (`handleError`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y gi√∫p chu·∫©n h√≥a ph·∫£n h·ªìi l·ªói b·∫±ng c√°ch l·∫•y m√£ l·ªói t·ª´ `CommonErrorDef`.</p>
   * <p>
   * **üìå C√°ch ho·∫°t ƒë·ªông:**
   * <ul>
   *   <li>üìå G·ªçi `handleError(CommonErrorDef, Object[], String)` ƒë·ªÉ x·ª≠ l√Ω l·ªói.</li>
   *   <li>üìå N·∫øu c√≥ `messageArg`, h·ªá th·ªëng s·ª≠ d·ª•ng ƒë·ªÉ format th√¥ng ƒëi·ªáp l·ªói.</li>
   * </ul>
   *
   * @param commonError M√£ l·ªói chung t·ª´ `CommonErrorDef`
   * @param errorDesc   M√¥ t·∫£ l·ªói
   * @return `ResponseEntity` ch·ª©a th√¥ng tin l·ªói.
   */
  @SuppressWarnings("rawtypes")
  private ResponseEntity handleError(CommonErrorDef commonError, String errorDesc) {
    return this.handleError(commonError, null, errorDesc);
  }

  /**
   * **T·∫°o ph·∫£n h·ªìi l·ªói c√≥ tham s·ªë (`handleError`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y h·ªó tr·ª£ x·ª≠ l√Ω l·ªói v·ªõi tham s·ªë ƒë·ªông trong th√¥ng b√°o l·ªói.</p>
   * <p>
   * **üìå C√°ch ho·∫°t ƒë·ªông:**
   * <ul>
   *   <li>üìå N·∫øu `messageArg` kh√¥ng null, h·ªá th·ªëng s·∫Ω format `errorDesc`.</li>
   *   <li>üìå G·ªçi ph∆∞∆°ng th·ª©c ch√≠nh `handleError(CommonErrorDef, Object[], List<SubError>, String)`.</li>
   * </ul>
   *
   * @param commonError M√£ l·ªói chung
   * @param messageArg  Tham s·ªë ƒë·ªÉ format th√¥ng b√°o l·ªói
   * @param errorDesc   M√¥ t·∫£ l·ªói
   * @return `ResponseEntity` ch·ª©a th√¥ng tin l·ªói.
   */
  @SuppressWarnings("rawtypes")
  private ResponseEntity handleError(CommonErrorDef commonError, Object[] messageArg,
                                     String errorDesc) {
    return this.handleError(commonError, messageArg, null, errorDesc);
  }

  /**
   * **T·∫°o ph·∫£n h·ªìi l·ªói chi ti·∫øt (`handleError`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c ch√≠nh ƒë·ªÉ x·ª≠ l√Ω l·ªói trong h·ªá th·ªëng, h·ªó tr·ª£ danh s√°ch l·ªói chi ti·∫øt.</p>
   * <p>
   * **üìå C√°ch ho·∫°t ƒë·ªông:**
   * <ul>
   *   <li>üìå L·∫•y m√£ l·ªói (`errorCode`) t·ª´ `CommonErrorDef`.</li>
   *   <li>üìå Format `errorDesc` n·∫øu c√≥ `messageArg`.</li>
   *   <li>üìå L·∫•y th√¥ng ƒëi·ªáp l·ªói theo ng√¥n ng·ªØ ng∆∞·ªùi d√πng t·ª´ `MessageSource`.</li>
   *   <li>üìå Tr·∫£ v·ªÅ ph·∫£n h·ªìi l·ªói c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin l·ªói chi ti·∫øt.</li>
   * </ul>
   *
   * @param commonError M√£ l·ªói chung t·ª´ `CommonErrorDef`
   * @param messageArg  Tham s·ªë ƒë·ªÉ format th√¥ng b√°o l·ªói
   * @param subErrors   Danh s√°ch l·ªói chi ti·∫øt
   * @param errorDesc   M√¥ t·∫£ l·ªói
   * @return `ResponseEntity` ch·ª©a th√¥ng tin l·ªói.
   */
  @SuppressWarnings("rawtypes")
  private ResponseEntity handleError(CommonErrorDef commonError, Object[] messageArg,
                                     List<SubError> subErrors, String errorDesc) {
    var errorCode = commonError.getErrorCode();
    if (messageArg != null) {
      errorDesc = String.format(errorDesc, messageArg);
    }
    HttpStatus httpStatus = commonError.getHttpStatus();
    return ResponseUtils.error(errorCode,
                               errorDesc,
                               messageSource.getMessage(errorCode,
                                                        messageArg,
                                                        errorDesc,
                                                        RequestUtils.extractLocale()),
                               subErrors,
                               httpStatus);
  }

  /**
   * **L·∫•y danh s√°ch l·ªói t·ª´ `MethodArgumentNotValidException`**
   *
   * <p>Chuy·ªÉn ƒë·ªïi danh s√°ch l·ªói t·ª´ `BindingResult` th√†nh danh s√°ch `SubError`.</p>
   * <p>
   * **üìå C√°ch ho·∫°t ƒë·ªông:**
   * <ul>
   *   <li>üìå Duy·ªát qua t·∫•t c·∫£ l·ªói trong `FieldError`.</li>
   *   <li>üìå T·∫°o m·ªôt `SubError` m·ªõi cho m·ªói l·ªói.</li>
   *   <li>üìå Tr·∫£ v·ªÅ danh s√°ch `SubError`.</li>
   * </ul>
   *
   * @param e Ngo·∫°i l·ªá `MethodArgumentNotValidException`
   * @return Danh s√°ch `SubError` ch·ª©a th√¥ng tin l·ªói chi ti·∫øt.
   */
  private List<SubError> getSubErrors(MethodArgumentNotValidException e) {
    List<SubError> subErrors = new ArrayList<>();
    List<FieldError> fieldErrors = e.getBindingResult().getFieldErrors();
    for (FieldError fieldError : fieldErrors) {
      SubError subError = new SubError(fieldError.getField(),
                                       fieldError.getRejectedValue(),
                                       fieldError.getDefaultMessage());
      subErrors.add(subError);
    }
    return subErrors;
  }

  /**
   * **L·∫•y danh s√°ch l·ªói t·ª´ `ConstraintViolationException`**
   *
   * <p>Chuy·ªÉn ƒë·ªïi danh s√°ch l·ªói t·ª´ `ConstraintViolation` th√†nh danh s√°ch `SubError`.</p>
   * <p>
   * **üìå C√°ch ho·∫°t ƒë·ªông:**
   * <ul>
   *   <li>üìå Duy·ªát qua t·∫•t c·∫£ `ConstraintViolation`.</li>
   *   <li>üìå T·∫°o `SubError` t·ª´ `propertyPath`, `invalidValue` v√† `message`.</li>
   *   <li>üìå Tr·∫£ v·ªÅ danh s√°ch `SubError`.</li>
   * </ul>
   *
   * @param e Ngo·∫°i l·ªá `ConstraintViolationException`
   * @return Danh s√°ch `SubError` ch·ª©a th√¥ng tin l·ªói chi ti·∫øt.
   */
  @SuppressWarnings("rawtypes")
  private List<SubError> getSubErrors(ConstraintViolationException e) {
    List<SubError> subErrors = new ArrayList<>();
    for (ConstraintViolation violation : e.getConstraintViolations()) {
      subErrors.add(new SubError(violation.getPropertyPath().toString(),
                                 violation.getInvalidValue(),
                                 violation.getMessage()));
    }
    return subErrors;
  }

  /**
   * **L·∫•y danh s√°ch l·ªói t·ª´ `HandlerMethodValidationException`**
   *
   * <p>Chuy·ªÉn ƒë·ªïi danh s√°ch l·ªói t·ª´ `HandlerMethodValidationException` th√†nh `SubError`.</p>
   * <p>
   * **üìå C√°ch ho·∫°t ƒë·ªông:**
   * <ul>
   *   <li>üìå Duy·ªát qua t·∫•t c·∫£ l·ªói trong danh s√°ch `getAllErrors()`.</li>
   *   <li>üìå Tr√≠ch xu·∫•t th√¥ng tin l·ªói v√† t·∫°o `SubError` t∆∞∆°ng ·ª©ng.</li>
   *   <li>üìå Tr·∫£ v·ªÅ danh s√°ch `SubError`.</li>
   * </ul>
   *
   * @param e Ngo·∫°i l·ªá `HandlerMethodValidationException`
   * @return Danh s√°ch `SubError` ch·ª©a th√¥ng tin l·ªói chi ti·∫øt.
   */
  @SuppressWarnings("unchecked")
  private List<SubError> getSubErrors(HandlerMethodValidationException e) {
    List<SubError> subErrors = new ArrayList<>();
    List<DefaultMessageSourceResolvable> fieldErrors = (List<DefaultMessageSourceResolvable>) e.getAllErrors();
    for (DefaultMessageSourceResolvable fieldError : fieldErrors) {
      SubError subError = new SubError(((DefaultMessageSourceResolvable) fieldError.getArguments()[0]).getDefaultMessage(),
                                       null,
                                       fieldError.getDefaultMessage());
      subErrors.add(subError);
    }
    return subErrors;
  }

  /**
   * @author haidv
   * @version 1.0
   */
  @Getter
  @RequiredArgsConstructor
  @Schema(description = "Chi ti·∫øt l·ªói validate")
  public static class SubError {

    @Schema(description = "T√™n tr∆∞·ªùng l·ªói")
    private final String fieldName;

    @Schema(description = "Gi√° tr·ªã l·ªói")
    private final Object fieldValue;

    @Schema(description = "Th√¥ng b√°o l·ªói")
    private final String message;
  }
}
