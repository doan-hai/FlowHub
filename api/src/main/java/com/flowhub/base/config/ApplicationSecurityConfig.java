package com.flowhub.base.config;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import lombok.RequiredArgsConstructor;
import org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties;
import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;
import org.springframework.boot.actuate.autoconfigure.web.server.ManagementPortType;
import org.springframework.boot.actuate.endpoint.ExposableEndpoint;
import org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver;
import org.springframework.boot.actuate.endpoint.web.EndpointMapping;
import org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes;
import org.springframework.boot.actuate.endpoint.web.ExposableWebEndpoint;
import org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier;
import org.springframework.boot.actuate.endpoint.web.servlet.WebMvcEndpointHandlerMapping;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.util.StringUtils;
import org.springframework.web.context.request.RequestContextListener;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import com.flowhub.base.constant.RequestConstant;
import com.flowhub.base.exception.CustomAccessDeniedHandler;
import com.flowhub.base.exception.CustomAuthenticationEntryPoint;
import com.flowhub.base.security.AuthenticationFilter;

/**
 * **C·∫•u h√¨nh b·∫£o m·∫≠t cho ·ª©ng d·ª•ng (`ApplicationSecurityConfig`)**
 *
 * <p>Class n√†y ch·ªãu tr√°ch nhi·ªám c·∫•u h√¨nh b·∫£o m·∫≠t cho ·ª©ng d·ª•ng, bao g·ªìm:</p>
 * <ul>
 *   <li>‚úÖ C·∫•u h√¨nh x√°c th·ª±c v√† ·ªßy quy·ªÅn cho c√°c API.</li>
 *   <li>‚úÖ C·∫•u h√¨nh b·ªô l·ªçc b·∫£o m·∫≠t (`SecurityFilterChain`).</li>
 *   <li>‚úÖ Qu·∫£n l√Ω CORS ƒë·ªÉ cho ph√©p ho·∫∑c h·∫°n ch·∫ø c√°c ngu·ªìn truy c·∫≠p.</li>
 *   <li>‚úÖ X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p t·ª´ ch·ªëi truy c·∫≠p v√† l·ªói x√°c th·ª±c.</li>
 * </ul>
 *
 * @author haidv
 * @version 1.0
 */
@Configuration
@EnableWebSecurity
@EnableMethodSecurity(securedEnabled = true, jsr250Enabled = true)
@RequiredArgsConstructor
public class ApplicationSecurityConfig {

  private final AuthenticationFilter jwtRequestFilter;

  private final CustomAuthenticationEntryPoint customAuthenticationEntryPoint;

  private final CustomAccessDeniedHandler customAccessDeniedHandler;

  /**
   * **C·∫•u h√¨nh chu·ªói b·ªô l·ªçc b·∫£o m·∫≠t (`SecurityFilterChain`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y th·ª±c hi·ªán:</p>
   * <ul>
   *   <li>üìå Cho ph√©p t·∫•t c·∫£ y√™u c·∫ßu trong danh s√°ch `IGNORE_AUTHENTICATION_PATTERN` ƒëi qua.</li>
   *   <li>üìå Y√™u c·∫ßu x√°c th·ª±c cho t·∫•t c·∫£ c√°c y√™u c·∫ßu c√≤n l·∫°i.</li>
   *   <li>üìå C·∫•u h√¨nh x·ª≠ l√Ω l·ªói khi truy c·∫≠p b·ªã t·ª´ ch·ªëi (`CustomAccessDeniedHandler`).</li>
   *   <li>üìå C·∫•u h√¨nh x·ª≠ l√Ω l·ªói khi x√°c th·ª±c th·∫•t b·∫°i (`CustomAuthenticationEntryPoint`).</li>
   *   <li>üìå Th√™m b·ªô l·ªçc JWT (`AuthenticationFilter`) v√†o tr∆∞·ªõc b·ªô l·ªçc x√°c th·ª±c `UsernamePasswordAuthenticationFilter`.</li>
   * </ul>
   *
   * @param http ƒê·ªëi t∆∞·ª£ng `HttpSecurity` ƒë·ªÉ c·∫•u h√¨nh b·∫£o m·∫≠t.
   * @return ƒê·ªëi t∆∞·ª£ng `SecurityFilterChain` ƒë√£ c·∫•u h√¨nh.
   * @throws Exception N·∫øu x·∫£y ra l·ªói khi thi·∫øt l·∫≠p b·∫£o m·∫≠t.
   */
  @Bean
  public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
    http.cors(
            cors ->
                cors.configurationSource(
                    request -> {
                      CorsConfiguration configuration = new CorsConfiguration();
                      configuration.setAllowedOrigins(List.of("*"));
                      configuration.setAllowedMethods(List.of("*"));
                      configuration.setAllowedHeaders(List.of("*"));
                      return configuration;
                    }))
        .csrf(AbstractHttpConfigurer::disable)
        .authorizeHttpRequests(
            authorizationManagerRequestMatcherRegistry ->
                authorizationManagerRequestMatcherRegistry
                    .requestMatchers(RequestConstant.getIgnoreAuthenticationPattern())
                    .permitAll()
                    .anyRequest()
                    .authenticated())
        .exceptionHandling(
            exceptionHandling ->
                exceptionHandling
                    .accessDeniedHandler(customAccessDeniedHandler)
                    .authenticationEntryPoint(customAuthenticationEntryPoint));

    http.addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);
    return http.build();
  }

  /**
   * **C·∫•u h√¨nh `AuthenticationManager`**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y tr·∫£ v·ªÅ m·ªôt `AuthenticationManager` ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi Spring Security.</p>
   *
   * @param http ƒê·ªëi t∆∞·ª£ng `HttpSecurity` ch·ª©a th√¥ng tin b·∫£o m·∫≠t.
   * @return M·ªôt `AuthenticationManager` ƒë·ªÉ qu·∫£n l√Ω x√°c th·ª±c ng∆∞·ªùi d√πng.
   * @throws Exception N·∫øu c√≥ l·ªói x·∫£y ra khi kh·ªüi t·∫°o.
   */
  @Bean
  public AuthenticationManager authenticationManagerBean(HttpSecurity http) throws Exception {
    return http.getSharedObject(AuthenticationManagerBuilder.class).build();
  }

  /**
   * **C·∫•u h√¨nh `RequestContextListener`**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y cung c·∫•p m·ªôt `RequestContextListener` ƒë·ªÉ l·∫Øng nghe c√°c s·ª± ki·ªán trong y√™u
   * c·∫ßu HTTP.</p>
   *
   * @return ƒê·ªëi t∆∞·ª£ng `RequestContextListener`.
   */
  @Bean
  public RequestContextListener requestContextListener() {
    return new RequestContextListener();
  }

  /**
   * **C·∫•u h√¨nh b·ªô m√£ h√≥a m·∫≠t kh·∫©u (`PasswordEncoder`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y tr·∫£ v·ªÅ m·ªôt `BCryptPasswordEncoder` ƒë·ªÉ m√£ h√≥a m·∫≠t kh·∫©u m·ªôt c√°ch an to√†n.</p>
   *
   * @return ƒê·ªëi t∆∞·ª£ng `PasswordEncoder` s·ª≠ d·ª•ng thu·∫≠t to√°n BCrypt.
   */
  @Bean
  public PasswordEncoder passwordEncoder() {
    return new BCryptPasswordEncoder();
  }


  /**
   * **C·∫•u h√¨nh x·ª≠ l√Ω endpoint Actuator**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y t·∫°o m·ªôt `WebMvcEndpointHandlerMapping` ƒë·ªÉ √°nh x·∫° c√°c endpoint c·ªßa
   * Actuator.</p>
   *
   * @return M·ªôt `WebMvcEndpointHandlerMapping` ƒë·ªÉ x·ª≠ l√Ω c√°c endpoint Actuator.
   */
  @Bean
  public WebMvcEndpointHandlerMapping webEndpointServletHandlerMapping(
      WebEndpointsSupplier webEndpointsSupplier,
      EndpointMediaTypes endpointMediaTypes,
      CorsEndpointProperties corsProperties,
      WebEndpointProperties webEndpointProperties,
      Environment environment) {
    Collection<ExposableWebEndpoint> webEndpoints = webEndpointsSupplier.getEndpoints();
    List<ExposableEndpoint<?>> allEndpoints = new ArrayList<>(webEndpoints);
    String basePath = webEndpointProperties.getBasePath();
    EndpointMapping endpointMapping = new EndpointMapping(basePath);
    boolean shouldRegisterLinksMapping =
        this.shouldRegisterLinksMapping(webEndpointProperties, environment, basePath);
    return new WebMvcEndpointHandlerMapping(
        endpointMapping,
        webEndpoints,
        endpointMediaTypes,
        corsProperties.toCorsConfiguration(),
        new EndpointLinksResolver(allEndpoints, basePath),
        shouldRegisterLinksMapping);
  }

  /**
   * **C·∫•u h√¨nh CORS cho t√†i nguy√™n tƒ©nh**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y gi√∫p √°nh x·∫° c√°c t√†i nguy√™n tƒ©nh nh∆∞ Swagger UI, WebJars.</p>
   *
   * @return M·ªôt `WebMvcConfigurer` ƒë·ªÉ c·∫•u h√¨nh t√†i nguy√™n tƒ©nh.
   */
  @Bean
  public WebMvcConfigurer corsMappingConfigurer() {
    return new WebMvcConfigurer() {

      @Override
      public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/**").addResourceLocations("classpath:/static/");
        registry
            .addResourceHandler("swagger-ui.html")
            .addResourceLocations("classpath:/META-INF/resources/");
        registry
            .addResourceHandler("/webjars/**")
            .addResourceLocations("classpath:/META-INF/resources/webjars/");
      }
    };
  }

  /**
   * **X√°c ƒë·ªãnh xem c√≥ n√™n ƒëƒÉng k√Ω √°nh x·∫° li√™n k·∫øt Actuator hay kh√¥ng**
   *
   * @return `true` n·∫øu c·∫ßn ƒëƒÉng k√Ω √°nh x·∫°, ng∆∞·ª£c l·∫°i `false`.
   */
  private boolean shouldRegisterLinksMapping(
      WebEndpointProperties webEndpointProperties, Environment environment, String basePath) {
    return webEndpointProperties.getDiscovery().isEnabled()
        && (StringUtils.hasText(basePath)
        || ManagementPortType.get(environment).equals(ManagementPortType.DIFFERENT));
  }
}
