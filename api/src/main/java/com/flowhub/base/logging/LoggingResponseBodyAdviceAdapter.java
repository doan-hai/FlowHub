package com.flowhub.base.logging;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.MethodParameter;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.server.ServerHttpRequest;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.http.server.ServletServerHttpRequest;
import org.springframework.http.server.ServletServerHttpResponse;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;

/**
 * **L·ªõp `LoggingResponseBodyAdviceAdapter` - Ghi log d·ªØ li·ªáu ph·∫£n h·ªìi t·ª´ API**
 *
 * <p>L·ªõp n√†y tri·ªÉn khai `ResponseBodyAdvice` ƒë·ªÉ can thi·ªáp v√†o qu√° tr√¨nh x·ª≠ l√Ω response,
 * gi√∫p ghi log n·ªôi dung ph·∫£n h·ªìi tr∆∞·ªõc khi g·ª≠i v·ªÅ client.</p>
 * <p>
 * **üìå C√°ch ho·∫°t ƒë·ªông:**
 * <p>M·ªói khi m·ªôt response ƒë∆∞·ª£c tr·∫£ v·ªÅ t·ª´ controller, ph∆∞∆°ng th·ª©c `beforeBodyWrite()` s·∫Ω ƒë∆∞·ª£c g·ªçi.
 * N·∫øu request l√† m·ªôt `ServletServerHttpRequest`, h·ªá th·ªëng s·∫Ω ghi log th√¥ng qua
 * `LoggingUtil.logResponse()`.</p>
 * <pre>
 * **üìå V√≠ d·ª• log response:**
 * ```
 * <--- HTTP/1.1 200 OK (120ms)
 * Content-Type: application/json
 * Body: {"status": "success", "data": {...}}
 * ```
 * </pre>
 *
 * @author haidv
 * @version 1.0
 */
@ControllerAdvice
public class LoggingResponseBodyAdviceAdapter implements ResponseBodyAdvice<Object> {

  /** Thu·ªôc t√≠nh logging ƒë·ªÉ ki·ªÉm so√°t vi·ªác ghi log response** */
  private final LoggingProperties loggingProperties;

  /**
   * **Constructor kh·ªüi t·∫°o `LoggingResponseBodyAdviceAdapter`**
   *
   * <p>Inject `LoggingProperties` ƒë·ªÉ x√°c ƒë·ªãnh c√≥ ghi log response hay kh√¥ng.</p>
   *
   * @param loggingProperties ƒê·ªëi t∆∞·ª£ng ch·ª©a c·∫•u h√¨nh logging.
   */
  @Autowired
  public LoggingResponseBodyAdviceAdapter(LoggingProperties loggingProperties) {
    this.loggingProperties = loggingProperties;
  }

  /**
   * **X√°c ƒë·ªãnh class n√†o s·∫Ω √°p d·ª•ng logic ghi log (`supports`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y quy·∫øt ƒë·ªãnh xem response c√≥ c·∫ßn ƒë∆∞·ª£c x·ª≠ l√Ω kh√¥ng.
   * ·ªû ƒë√¢y, n√≥ lu√¥n tr·∫£ v·ªÅ `true` ƒë·ªÉ √°p d·ª•ng cho t·∫•t c·∫£ response.</p>
   *
   * @param returnType    Ki·ªÉu d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ controller.
   * @param converterType Lo·∫°i `HttpMessageConverter` ƒë∆∞·ª£c s·ª≠ d·ª•ng.
   * @return Lu√¥n tr·∫£ v·ªÅ `true`, nghƒ©a l√† √°p d·ª•ng cho t·∫•t c·∫£ response.
   */
  @Override
  public boolean supports(
      MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {
    return true;
  }

  /**
   * **Ghi log d·ªØ li·ªáu response tr∆∞·ªõc khi tr·∫£ v·ªÅ client (`beforeBodyWrite`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y s·∫Ω ghi log n·ªôi dung response n·∫øu request l√† `ServletServerHttpRequest`.</p>
   * <p>
   * **üìå C√°ch ho·∫°t ƒë·ªông:**
   * <ul>
   *   <li>üìå N·∫øu request l√† `ServletServerHttpRequest`, g·ªçi `LoggingUtil.logResponse()` ƒë·ªÉ ghi log.</li>
   *   <li>üìå Tr·∫£ v·ªÅ n·ªôi dung g·ªëc c·ªßa response ƒë·ªÉ ti·∫øp t·ª•c x·ª≠ l√Ω b√¨nh th∆∞·ªùng.</li>
   * </ul>
   *
   * @param body                  N·ªôi dung ph·∫£n h·ªìi t·ª´ controller.
   * @param returnType            Ki·ªÉu d·ªØ li·ªáu ph·∫£n h·ªìi t·ª´ controller.
   * @param selectedContentType   Lo·∫°i n·ªôi dung ph·∫£n h·ªìi (JSON, XML,...).
   * @param selectedConverterType Ki·ªÉu `HttpMessageConverter` ƒë∆∞·ª£c s·ª≠ d·ª•ng.
   * @param request               ƒê·ªëi t∆∞·ª£ng `ServerHttpRequest` ch·ª©a th√¥ng tin request.
   * @param response              ƒê·ªëi t∆∞·ª£ng `ServerHttpResponse` ch·ª©a th√¥ng tin response.
   * @return N·ªôi dung ph·∫£n h·ªìi g·ªëc, kh√¥ng b·ªã thay ƒë·ªïi.
   */
  @Override
  public Object beforeBodyWrite(
      Object body,
      MethodParameter returnType,
      MediaType selectedContentType,
      Class<? extends HttpMessageConverter<?>> selectedConverterType,
      ServerHttpRequest request,
      ServerHttpResponse response) {

    // **üìå Ki·ªÉm tra n·∫øu request l√† ServletServerHttpRequest th√¨ ghi log**
    if (request instanceof ServletServerHttpRequest serverHttpRequest
        && response instanceof ServletServerHttpResponse serverHttpResponse) {
      LoggingUtil.logResponse(
          serverHttpRequest.getServletRequest(),
          serverHttpResponse.getServletResponse(),
          loggingProperties,
          body);
    }

    // Tr·∫£ v·ªÅ body g·ªëc ƒë·ªÉ ti·∫øp t·ª•c x·ª≠ l√Ω b√¨nh th∆∞·ªùng
    return body;
  }
}