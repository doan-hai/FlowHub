package com.flowhub.base.exception;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.MessageSource;
import org.springframework.http.MediaType;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.access.AccessDeniedHandler;
import org.springframework.stereotype.Component;
import com.flowhub.base.data.ResponseUtils;
import com.flowhub.base.logging.LoggingProperties;
import com.flowhub.base.utils.RequestUtils;

import static com.flowhub.base.logging.LoggingUtil.logRequest;
import static com.flowhub.base.logging.LoggingUtil.logResponse;
import static com.flowhub.base.utils.JsonUtils.toJson;

/**
 * **L·ªõp `CustomAccessDeniedHandler` - X·ª≠ l√Ω l·ªói truy c·∫≠p b·ªã t·ª´ ch·ªëi (403 Forbidden)**
 *
 * <p>L·ªõp n√†y tri·ªÉn khai `AccessDeniedHandler` ƒë·ªÉ x·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn
 * truy c·∫≠p v√†o t√†i nguy√™n b·∫£o v·ªá trong h·ªá th·ªëng Spring Security.</p>
 * <p>
 * **üìå C√°ch ho·∫°t ƒë·ªông:**
 * <p>Khi m·ªôt ng∆∞·ªùi d√πng c·ªë g·∫Øng truy c·∫≠p v√†o m·ªôt t√†i nguy√™n m√† h·ªç kh√¥ng c√≥ quy·ªÅn,
 * h·ªá th·ªëng s·∫Ω k√≠ch ho·∫°t `handle()` ƒë·ªÉ th·ª±c hi·ªán c√°c b∆∞·ªõc sau:</p>
 * <ul>
 *   <li>üìå Ghi log y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng.</li>
 *   <li>üìå L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ `SecurityContextHolder`.</li>
 *   <li>üìå T·∫°o ph·∫£n h·ªìi JSON ch·ª©a th√¥ng tin l·ªói (`CommonErrorDef.FORBIDDEN`).</li>
 *   <li>üìå Ghi log ph·∫£n h·ªìi v√† g·ª≠i tr·∫£ v·ªÅ client.</li>
 * </ul>
 * <p>
 * **üìå V√≠ d·ª• ph·∫£n h·ªìi JSON khi truy c·∫≠p b·ªã t·ª´ ch·ªëi:**
 * <pre>
 * {
 *     "errorCode": "CM_0003",
 *     "message": "Forbidden",
 *     "detailedMessage": "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i nguy√™n n√†y",
 *     "data": null
 * }
 * </pre>
 *
 * @author haidv
 * @version 1.0
 */
@Slf4j
@RequiredArgsConstructor
@Component
public class CustomAccessDeniedHandler implements AccessDeniedHandler {

  /** C·∫•u h√¨nh logging ƒë·ªÉ x√°c ƒë·ªãnh c√≥ ghi log request/response hay kh√¥ng** */
  private final LoggingProperties loggingProperties;

  private final MessageSource messageSource;

  /**
   * **X·ª≠ l√Ω l·ªói truy c·∫≠p b·ªã t·ª´ ch·ªëi (`handle`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o m·ªôt t√†i nguy√™n
   * ƒë∆∞·ª£c b·∫£o v·ªá. N√≥ s·∫Ω tr·∫£ v·ªÅ ph·∫£n h·ªìi JSON ch·ª©a th√¥ng tin l·ªói v√† ghi log l·ªói.</p>
   *
   * @param request  ƒê·ªëi t∆∞·ª£ng `HttpServletRequest` ch·ª©a th√¥ng tin y√™u c·∫ßu.
   * @param response ƒê·ªëi t∆∞·ª£ng `HttpServletResponse` ƒë·ªÉ g·ª≠i ph·∫£n h·ªìi l·ªói.
   * @param exc      Ngo·∫°i l·ªá `AccessDeniedException` ch·ª©a th√¥ng tin l·ªói.
   * @throws IOException N·∫øu c√≥ l·ªói x·∫£y ra khi ghi ph·∫£n h·ªìi.
   */
  @Override
  public void handle(
      HttpServletRequest request, HttpServletResponse response, AccessDeniedException exc)
      throws IOException {
    // Ghi log y√™u c·∫ßu HTTP tr∆∞·ªõc khi x·ª≠ l√Ω l·ªói
    logRequest(request, loggingProperties);

    // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ SecurityContextHolder
    var auth = SecurityContextHolder.getContext().getAuthentication();

    // N·∫øu ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p nh∆∞ng kh√¥ng c√≥ quy·ªÅn truy c·∫≠p, ghi log c·∫£nh b√°o
    if (auth != null) {
      log.warn(
          "Ng∆∞·ªùi d√πng: {} ƒë√£ c·ªë g·∫Øng truy c·∫≠p v√†o URL b·ªã c·∫•m: {}",
          auth.getName(),
          request.getRequestURI());
    }

    // L·∫•y m√£ l·ªói FORBIDDEN t·ª´ danh s√°ch l·ªói chung
    var errorCode = CommonErrorDef.FORBIDDEN;

    // C·∫•u h√¨nh response tr·∫£ v·ªÅ cho client
    response.setCharacterEncoding("UTF-8");
    response.setStatus(errorCode.getHttpStatus().value());
    response.setContentType(MediaType.APPLICATION_JSON_VALUE);

    // Vi·∫øt ph·∫£n h·ªìi JSON v√†o response
    response
        .getWriter()
        .write(
            toJson(
                ResponseUtils.getResponseDataError(
                    errorCode.getErrorCode(),
                    exc.getMessage(),
                    messageSource.getMessage(
                        errorCode.getErrorCode(),
                        null,
                        exc.getMessage(),
                        RequestUtils.extractLocale()),
                    null)));

    // Ghi log ph·∫£n h·ªìi JSON tr∆∞·ªõc khi g·ª≠i cho client
    logResponse(request, response, loggingProperties);
  }
}