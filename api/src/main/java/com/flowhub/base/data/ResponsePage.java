package com.flowhub.base.data;

import io.swagger.v3.oas.annotations.media.Schema;
import java.util.List;
import lombok.Getter;
import lombok.NoArgsConstructor;
import org.springframework.data.domain.Page;

/**
 * **L·ªõp `ResponsePage` - ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi ph√¢n trang cho API**
 *
 * <p>L·ªõp n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ chu·∫©n h√≥a ph·∫£n h·ªìi t·ª´ c√°c API c√≥ h·ªó tr·ª£ ph√¢n trang.</p>
 * <p>
 * **üìå C√°ch ho·∫°t ƒë·ªông:**
 * <p>Khi m·ªôt API tr·∫£ v·ªÅ danh s√°ch d·ªØ li·ªáu c√≥ ph√¢n trang, thay v√¨ ch·ªâ tr·∫£ v·ªÅ danh s√°ch d·ªØ li·ªáu,
 * ta s·ª≠ d·ª•ng `ResponsePage<T>` ƒë·ªÉ cung c·∫•p th√™m th√¥ng tin v·ªÅ trang hi·ªán t·∫°i, t·ªïng s·ªë trang, v√† t·ªïng
 * s·ªë b·∫£n ghi.</p>
 * <p>
 * **üìå V√≠ d·ª• s·ª≠ d·ª•ng trong API Controller:**
 * <pre>
 * {@code
 * @RestController
 * public class UserController {
 *
 *     @GetMapping("/users")
 *     public ResponseEntity<ResponsePage<UserDto>> getUsers(@RequestParam int pageNo, @RequestParam int pageSize) {
 *         Page<UserDto> users = userService.getAllUsers(PageRequest.of(pageNo - 1, pageSize));
 *         return ResponseEntity.ok(new ResponsePage<>(users));
 *     }
 * }
 * }
 * </pre>
 * <p>
 * **üìå V√≠ d·ª• JSON ph·∫£n h·ªìi c·ªßa API c√≥ ph√¢n trang:**
 * <pre>
 * {
 *     "pageInfo": {
 *         "pageNo": 1,
 *         "pageSize": 20,
 *         "totalCount": 100,
 *         "totalPage": 5
 *     },
 *     "data": [
 *         {
 *             "id": 1,
 *             "name": "John Doe"
 *         },
 *         {
 *             "id": 2,
 *             "name": "Jane Doe"
 *         }
 *     ]
 * }
 * </pre>
 *
 * @param <T> Ki·ªÉu d·ªØ li·ªáu c·ªßa danh s√°ch ph·∫£n h·ªìi trong trang hi·ªán t·∫°i.
 * @author haidv
 * @version 1.0
 */
@Getter
@NoArgsConstructor
public class ResponsePage<T> {

  @Schema(description = "Th√¥ng tin ph√¢n trang c·ªßa d·ªØ li·ªáu")
  private PageInfo pageInfo;

  @Schema(description = "Danh s√°ch d·ªØ li·ªáu c·ªßa trang hi·ªán t·∫°i")
  private List<T> data;

  /**
   * **Constructor kh·ªüi t·∫°o `ResponsePage` t·ª´ th√¥ng tin ph√¢n trang ri√™ng l·∫ª**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y kh·ªüi t·∫°o m·ªôt `ResponsePage` t·ª´ th√¥ng tin ph√¢n trang th·ªß c√¥ng.</p>
   *
   * @param pageNo     S·ªë trang hi·ªán t·∫°i.
   * @param pageSize   S·ªë b·∫£n ghi tr√™n m·ªói trang.
   * @param totalCount T·ªïng s·ªë b·∫£n ghi.
   * @param totalPage  T·ªïng s·ªë trang.
   * @param data       Danh s√°ch d·ªØ li·ªáu c·ªßa trang hi·ªán t·∫°i.
   */
  public ResponsePage(int pageNo, int pageSize, long totalCount, int totalPage, List<T> data) {
    this.pageInfo = new PageInfo(pageNo, pageSize, totalCount, totalPage);
    this.data = data;
  }

  /**
   * **Constructor kh·ªüi t·∫°o `ResponsePage` t·ª´ ƒë·ªëi t∆∞·ª£ng `Page<T>`**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y gi√∫p t·∫°o `ResponsePage` t·ª´ `Page<T>` c·ªßa Spring Data JPA.</p>
   * <p>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * Page<UserDto> users = userService.getAllUsers(PageRequest.of(0, 20));
   * ResponsePage<UserDto> response = new ResponsePage<>(users);
   * }
   * </pre>
   *
   * @param page ƒê·ªëi t∆∞·ª£ng `Page<T>` ch·ª©a th√¥ng tin ph√¢n trang v√† d·ªØ li·ªáu.
   */
  public ResponsePage(Page<T> page) {
    this(page, page.getContent());
  }

  /**
   * **Constructor h·ªó tr·ª£ kh·ªüi t·∫°o t·ª´ `Page<T>` v√† danh s√°ch d·ªØ li·ªáu t√πy ch·ªânh**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y gi√∫p kh·ªüi t·∫°o `ResponsePage` khi mu·ªën s·ª≠ d·ª•ng danh s√°ch d·ªØ li·ªáu
   * ƒë∆∞·ª£c bi·∫øn ƒë·ªïi t·ª´ `Page<T>` ban ƒë·∫ßu.</p>
   * <p>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * Page<UserEntity> users = userRepository.findAll(PageRequest.of(0, 20));
   * List<UserDto> userDtos = users.getContent().stream().map(userMapper::toDto).collect(Collectors.toList());
   * ResponsePage<UserDto> response = new ResponsePage<>(users, userDtos);
   * }
   * </pre>
   *
   * @param page ƒê·ªëi t∆∞·ª£ng `Page<T>` ch·ª©a th√¥ng tin ph√¢n trang.
   * @param data Danh s√°ch d·ªØ li·ªáu t√πy ch·ªânh (c√≥ th·ªÉ ƒë√£ qua √°nh x·∫° DTO).
   */
  @SuppressWarnings("rawtypes")
  public ResponsePage(Page page, List<T> data) {
    this(page.getNumber() + 1, page.getSize(), page.getTotalElements(), page.getTotalPages(), data);
  }
}
