package com.flowhub.base.event;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import com.flowhub.base.utils.Snowflake;

/**
 * **L·ªõp `EventInfo` - L∆∞u tr·ªØ th√¥ng tin v·ªÅ m·ªôt s·ª± ki·ªán**
 *
 * <p>L·ªõp n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ƒë√≥ng g√≥i th√¥ng tin v·ªÅ m·ªôt s·ª± ki·ªán trong h·ªá th·ªëng event-driven.</p>
 * <p>
 * **üìå C√°ch ho·∫°t ƒë·ªông:**
 * <p>M·ªói s·ª± ki·ªán khi ƒë∆∞·ª£c t·∫°o s·∫Ω ƒë∆∞·ª£c g√°n m·ªôt ID duy nh·∫•t (sinh t·ª´ thu·∫≠t to√°n Snowflake)
 * v√† c√≥ th·ªÉ ƒë∆∞·ª£c x·ª≠ l√Ω ƒë·ªìng b·ªô ho·∫∑c b·∫•t ƒë·ªìng b·ªô, t√πy thu·ªôc v√†o c·∫•u h√¨nh.</p>
 * <p>
 * **üìå V√≠ d·ª• s·ª≠ d·ª•ng `EventInfo` trong m·ªôt s·ª± ki·ªán ng∆∞·ªùi d√πng ƒë∆∞·ª£c t·∫°o:**
 * <pre>
 * {@code
 * EventData eventData = new UserCreatedEventData(123L, "john_doe");
 * CoreEvent coreEvent = new UserCreatedEvent();
 * EventInfo eventInfo = new EventInfo(eventData, coreEvent, false, 3);
 * }
 * </pre>
 *
 * @author haidv
 * @version 1.0
 */
@Getter
@RequiredArgsConstructor
public class EventInfo {

  /** S·ªë l·∫ßn th·ª≠ l·∫°i m·∫∑c ƒë·ªãnh khi x·ª≠ l√Ω s·ª± ki·ªán** */
  public static final int DEFAULT_RETRY_EVENT = 3;

  /** ID duy nh·∫•t c·ªßa s·ª± ki·ªán (ƒë∆∞·ª£c sinh b·∫±ng Snowflake)** */
  private final String id;

  /** D·ªØ li·ªáu c·ªßa s·ª± ki·ªán (th·ª±c th·ªÉ tri·ªÉn khai `EventData`)** */
  private final EventData what;

  /** ƒê·ªëi t∆∞·ª£ng s·ª± ki·ªán (th·ª±c th·ªÉ tri·ªÉn khai `CoreEvent`)** */
  private final CoreEvent event;

  /** X√°c ƒë·ªãnh s·ª± ki·ªán c√≥ ƒë∆∞·ª£c x·ª≠ l√Ω ƒë·ªìng b·ªô (`true`) hay b·∫•t ƒë·ªìng b·ªô (`false`)** */
  private final boolean isSync;

  /** S·ªë l·∫ßn th·ª≠ l·∫°i khi s·ª± ki·ªán g·∫∑p l·ªói** */
  private final int retry;

  /**
   * **Constructor t·∫°o s·ª± ki·ªán v·ªõi s·ªë l·∫ßn th·ª≠ l·∫°i m·∫∑c ƒë·ªãnh**
   *
   * <p>G√°n `retry` = `DEFAULT_RETRY_EVENT` (3 l·∫ßn).</p>
   *
   * @param what  D·ªØ li·ªáu s·ª± ki·ªán.
   * @param event ƒê·ªëi t∆∞·ª£ng s·ª± ki·ªán.
   */
  public EventInfo(EventData what, CoreEvent event) {
    this(what, event, DEFAULT_RETRY_EVENT);
  }

  /**
   * **Constructor t·∫°o s·ª± ki·ªán v·ªõi s·ªë l·∫ßn th·ª≠ l·∫°i t√πy ch·ªânh**
   *
   * @param what  D·ªØ li·ªáu s·ª± ki·ªán.
   * @param event ƒê·ªëi t∆∞·ª£ng s·ª± ki·ªán.
   * @param retry S·ªë l·∫ßn th·ª≠ l·∫°i khi x·ª≠ l√Ω s·ª± ki·ªán g·∫∑p l·ªói.
   */
  public EventInfo(EventData what, CoreEvent event, int retry) {
    this(what, false, event, retry);
  }

  /**
   * **Constructor t·∫°o s·ª± ki·ªán ƒë·ªìng b·ªô ho·∫∑c b·∫•t ƒë·ªìng b·ªô**
   *
   * <p>M·∫∑c ƒë·ªãnh s·ªë l·∫ßn th·ª≠ l·∫°i l√† `DEFAULT_RETRY_EVENT` (3 l·∫ßn).</p>
   *
   * @param what   D·ªØ li·ªáu s·ª± ki·ªán.
   * @param isSync `true` n·∫øu x·ª≠ l√Ω ƒë·ªìng b·ªô, `false` n·∫øu x·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô.
   * @param event  ƒê·ªëi t∆∞·ª£ng s·ª± ki·ªán.
   */
  public EventInfo(EventData what, boolean isSync, CoreEvent event) {
    this(what, isSync, event, DEFAULT_RETRY_EVENT);
  }

  /**
   * **Constructor ƒë·∫ßy ƒë·ªß cho `EventInfo`**
   *
   * <p>Sinh ID duy nh·∫•t b·∫±ng thu·∫≠t to√°n Snowflake.</p>
   *
   * @param what   D·ªØ li·ªáu s·ª± ki·ªán.
   * @param isSync `true` n·∫øu x·ª≠ l√Ω ƒë·ªìng b·ªô, `false` n·∫øu x·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô.
   * @param event  ƒê·ªëi t∆∞·ª£ng s·ª± ki·ªán.
   * @param retry  S·ªë l·∫ßn th·ª≠ l·∫°i khi x·ª≠ l√Ω s·ª± ki·ªán g·∫∑p l·ªói.
   */
  public EventInfo(EventData what, boolean isSync, CoreEvent event, int retry) {
    this(String.valueOf(Snowflake.getInstance().nextId()), what, event, isSync, retry);
  }
}
