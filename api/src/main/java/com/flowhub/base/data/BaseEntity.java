package com.flowhub.base.data;

import jakarta.persistence.Column;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.MappedSuperclass;
import jakarta.persistence.Version;

import java.io.Serial;
import java.io.Serializable;
import java.time.LocalDateTime;
import lombok.Getter;
import lombok.Setter;
import lombok.experimental.FieldNameConstants;
import org.springframework.data.annotation.CreatedBy;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedBy;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
import com.flowhub.base.annotations.SnowflakeGeneratedId;


/**
 * **L·ªõp c∆° s·ªü cho c√°c entity (`BaseEntity`)**
 *
 * <p>L·ªõp n√†y cung c·∫•p c√°c tr∆∞·ªùng chung ƒë∆∞·ª£c s·ª≠ d·ª•ng trong t·∫•t c·∫£ c√°c entity c·ªßa h·ªá th·ªëng.</p>
 * <p>
 * **üìå C√°ch s·ª≠ d·ª•ng:**
 * <p>Trong m·ªôt entity c·ª• th·ªÉ, ch·ªâ c·∫ßn k·∫ø th·ª´a `BaseEntity` ƒë·ªÉ t·ª± ƒë·ªông c√≥ c√°c tr∆∞·ªùng chung.</p>
 * <p>
 * **üìå V√≠ d·ª• entity k·∫ø th·ª´a `BaseEntity`:**
 * <pre>
 * {@code
 * @Entity
 * public class User extends BaseEntity {
 *     private String username;
 *     private String email;
 * }
 * }
 * </pre>
 * <p>
 * **üìå C∆° ch·∫ø Auditing t·ª± ƒë·ªông ho·∫°t ƒë·ªông khi c√≥ c·∫•u h√¨nh `@EnableJpaAuditing` trong
 * `PersistenceConfig.java`.**
 *
 * @author haidv
 * @version 1.0
 */
@Setter
@Getter
@MappedSuperclass
@EntityListeners(AuditingEntityListener.class)
@FieldNameConstants
public abstract class BaseEntity implements Serializable {

  /**
   * **Serial Version UID** D√πng ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh t∆∞∆°ng th√≠ch khi serialize ƒë·ªëi t∆∞·ª£ng.
   */
  @Serial
  private static final long serialVersionUID = 1L;

  /**
   * **Kh√≥a ch√≠nh c·ªßa entity (`ID`)**
   *
   * <p>S·ª≠ d·ª•ng `@GeneratedValue` k·∫øt h·ª£p v·ªõi `SnowflakeGeneratorStrategy` ƒë·ªÉ t·∫°o ID duy nh·∫•t.</p>
   */
  @Id
  @Column(name = "ID")
  @GeneratedValue
  @SnowflakeGeneratedId
  private Long id;

  /**
   * **Th·ªùi gian t·∫°o b·∫£n ghi (`CREATED_AT`)**
   *
   * <p>Tr∆∞·ªùng n√†y s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c g√°n gi√° tr·ªã khi b·∫£n ghi ƒë∆∞·ª£c t·∫°o.</p>
   */
  @CreatedDate
  @Column(name = "CREATED_AT", nullable = false, updatable = false)
  private LocalDateTime createdAt;

  /**
   * **Th·ªùi gian c·∫≠p nh·∫≠t b·∫£n ghi (`UPDATED_AT`)**
   *
   * <p>Tr∆∞·ªùng n√†y s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c c·∫≠p nh·∫≠t m·ªói khi b·∫£n ghi b·ªã ch·ªânh s·ª≠a.</p>
   */
  @LastModifiedDate
  @Column(name = "UPDATED_AT", nullable = false)
  private LocalDateTime updatedAt;

  /**
   * **Ng∆∞·ªùi t·∫°o b·∫£n ghi (`CREATED_BY`)**
   *
   * <p>L∆∞u l·∫°i ID ho·∫∑c username c·ªßa ng∆∞·ªùi ƒë√£ t·∫°o b·∫£n ghi.</p>
   */
  @CreatedBy
  @Column(name = "CREATED_BY", nullable = false, updatable = false)
  private String createdBy;

  /**
   * **Ng∆∞·ªùi ch·ªânh s·ª≠a g·∫ßn nh·∫•t (`UPDATED_BY`)**
   *
   * <p>L∆∞u l·∫°i ID ho·∫∑c username c·ªßa ng∆∞·ªùi ch·ªânh s·ª≠a l·∫ßn cu·ªëi.</p>
   */
  @LastModifiedBy
  @Column(name = "UPDATED_BY", nullable = false)
  private String updatedBy;

  /**
   * **C·ªù ƒë√°nh d·∫•u b·∫£n ghi ƒë√£ b·ªã x√≥a (`IS_DELETED`)**
   *
   * <p>Tr∆∞·ªùng n√†y cho ph√©p "x√≥a m·ªÅm" (soft delete). Thay v√¨ x√≥a d·ªØ li·ªáu trong DB, ta ch·ªâ ƒë√°nh d·∫•u
   * n√≥ l√† `true`.</p>
   */
  @Column(name = "IS_DELETED", nullable = false)
  private boolean deleted = false;

  /**
   * **C∆° ch·∫ø ki·ªÉm so√°t phi√™n b·∫£n (`VERSION`)**
   *
   * <p>Gi√∫p qu·∫£n l√Ω xung ƒë·ªôt khi c√≥ nhi·ªÅu ng∆∞·ªùi d√πng c√πng c·∫≠p nh·∫≠t b·∫£n ghi.</p>
   */
  @Version
  @Column(name = "VERSION", nullable = false)
  private Long version;
}
