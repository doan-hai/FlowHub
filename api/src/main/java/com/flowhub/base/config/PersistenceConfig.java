package com.flowhub.base.config;

import java.time.LocalDateTime;
import java.util.Optional;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.auditing.DateTimeProvider;
import org.springframework.data.domain.AuditorAware;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import org.springframework.security.core.context.SecurityContextHolder;
import com.flowhub.base.constant.RequestConstant;

/**
 * **C·∫•u h√¨nh Persistence (`PersistenceConfig`)**
 *
 * <p>L·ªõp n√†y cung c·∫•p c√°c c·∫•u h√¨nh c·∫ßn thi·∫øt ƒë·ªÉ h·ªó tr·ª£ **JPA Auditing** trong ·ª©ng d·ª•ng.
 * N√≥ gi√∫p t·ª± ƒë·ªông ghi l·∫°i th√¥ng tin v·ªÅ **ng∆∞·ªùi th·ª±c hi·ªán** v√† **th·ªùi ƒëi·ªÉm th·ª±c hi·ªán** khi c√°c
 * entity ƒë∆∞·ª£c t·∫°o ho·∫∑c c·∫≠p nh·∫≠t.</p>
 * <p>
 * **üìå Ch·ª©c nƒÉng ch√≠nh:**
 * <ul>
 *   <li>‚úÖ C·∫•u h√¨nh `DateTimeProvider` ƒë·ªÉ t·ª± ƒë·ªông l·∫•y th·ªùi gian hi·ªán t·∫°i khi auditing.</li>
 *   <li>‚úÖ C·∫•u h√¨nh `AuditorAware` ƒë·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi th·ª±c hi·ªán thao t√°c trong h·ªá th·ªëng.</li>
 *   <li>‚úÖ K√≠ch ho·∫°t JPA Auditing b·∫±ng annotation `@EnableJpaAuditing`.</li>
 * </ul>
 * <p>
 * **üìå C√°ch ho·∫°t ƒë·ªông:**
 * <p>Spring Data JPA s·ª≠ d·ª•ng `AuditorAware` v√† `DateTimeProvider` ƒë·ªÉ t·ª± ƒë·ªông
 * ƒëi·ªÅn th√¥ng tin **ng∆∞·ªùi th·ª±c hi·ªán** (`createdBy`, `lastModifiedBy`) v√† **th·ªùi gian** (`createdDate`, `lastModifiedDate`)
 * khi thao t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu.</p>
 * <p>
 * **üìå V√≠ d·ª• s·ª≠ d·ª•ng trong Entity:**
 * <pre>
 * {@code
 * @Entity
 * @EntityListeners(AuditingEntityListener.class)
 * public class User {
 *
 *     @CreatedBy
 *     private String createdBy;
 *
 *     @CreatedDate
 *     private LocalDateTime createdDate;
 *
 *     @LastModifiedBy
 *     private String lastModifiedBy;
 *
 *     @LastModifiedDate
 *     private LocalDateTime lastModifiedDate;
 * }
 * }
 * </pre>
 *
 * @author haidv
 * @version 1.0
 */
@Configuration
@EnableJpaAuditing(
    auditorAwareRef = "auditorProvider",
    dateTimeProviderRef = "auditingDateTimeProvider")
public class PersistenceConfig {

  /**
   * **Cung c·∫•p th·ªùi gian hi·ªán t·∫°i cho JPA Auditing**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y t·∫°o m·ªôt `DateTimeProvider` gi√∫p t·ª± ƒë·ªông l·∫•y th·ªùi gian hi·ªán t·∫°i
   * khi auditing trong c∆° s·ªü d·ªØ li·ªáu.</p>
   *
   * @return ƒê·ªëi t∆∞·ª£ng `DateTimeProvider` cung c·∫•p `LocalDateTime.now()`.
   */
  @Bean(name = "auditingDateTimeProvider")
  public DateTimeProvider dateTimeProvider() {
    return () -> Optional.of(LocalDateTime.now());
  }

  /**
   * **Cung c·∫•p th√¥ng tin ng∆∞·ªùi th·ª±c hi·ªán thao t√°c (Auditor)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y tr·∫£ v·ªÅ m·ªôt `AuditorAware<String>`, gi√∫p Spring Security l·∫•y
   * th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i ƒë·ªÉ l∆∞u v√†o c√°c tr∆∞·ªùng `createdBy`, `lastModifiedBy`.</p>
   *
   * @return ƒê·ªëi t∆∞·ª£ng `AuditorAware` l·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ `SecurityContextHolder`.
   */
  @Bean
  AuditorAware<String> auditorProvider() {
    return new AuditorAwareImpl();
  }

  /**
   * **L·ªõp tri·ªÉn khai `AuditorAware` ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi th·ª±c hi·ªán**
   *
   * <p>L·ªõp n√†y th·ª±c hi·ªán ph∆∞∆°ng th·ª©c `getCurrentAuditor()`, s·ª≠ d·ª•ng Spring Security ƒë·ªÉ
   * l·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ `SecurityContextHolder`.</p>
   */
  public static class AuditorAwareImpl implements AuditorAware<String> {

    /**
     * **L·∫•y ID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i**
     *
     * <p>Ph∆∞∆°ng th·ª©c n√†y s·∫Ω l·∫•y t√™n c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ `SecurityContextHolder`.
     * N·∫øu kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o ƒëƒÉng nh·∫≠p, n√≥ s·∫Ω tr·∫£ v·ªÅ m·ªôt gi√° tr·ªã m·∫∑c ƒë·ªãnh (`SYSTEM`).</p>
     *
     * @return `Optional<String>` ch·ª©a ID c·ªßa ng∆∞·ªùi th·ª±c hi·ªán thao t√°c.
     */
    @Override
    public Optional<String> getCurrentAuditor() {
      try {
        var userId = SecurityContextHolder.getContext().getAuthentication().getName();
        return userId == null || userId.equals("anonymousUser")
            ? Optional.of(RequestConstant.SYSTEM)
            : Optional.of(userId);
      } catch (Exception e) {
        return Optional.of(RequestConstant.SYSTEM);
      }
    }
  }
}
