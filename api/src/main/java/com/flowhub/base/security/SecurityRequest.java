package com.flowhub.base.security;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import com.flowhub.base.exception.BaseException;
import com.flowhub.base.exception.CommonErrorDef;
import com.flowhub.base.utils.AESUtils;

/**
 * **L·ªõp `SecurityRequest` - X·ª≠ l√Ω m√£ h√≥a v√† gi·∫£i m√£ d·ªØ li·ªáu**
 *
 * <p>L·ªõp n√†y m·ªü r·ªông `AbstractSecurityRequest` ƒë·ªÉ cung c·∫•p c√°c ph∆∞∆°ng th·ª©c m√£ h√≥a
 * v√† gi·∫£i m√£ d·ªØ li·ªáu b·∫±ng thu·∫≠t to√°n AES. N√≥ s·ª≠ d·ª•ng `AESUtils` ƒë·ªÉ th·ª±c hi·ªán m√£ h√≥a v√† gi·∫£i m√£ b·∫±ng
 * c√°c kh√≥a b√≠ m·∫≠t ƒë∆∞·ª£c c·∫•u h√¨nh trong `application.properties`.</p>
 * <p>
 * **üìå C√°ch ho·∫°t ƒë·ªông:**
 * <pre>
 * - C√°c kh√≥a b√≠ m·∫≠t (`privateKeyEncrypt` v√† `privateKeyChecksum`) ƒë∆∞·ª£c inject t·ª´ c·∫•u h√¨nh.
 * - `encryptData()` s·ª≠ d·ª•ng `AESUtils.encrypt()` ƒë·ªÉ m√£ h√≥a d·ªØ li·ªáu.
 * - `decryptData()` s·ª≠ d·ª•ng `AESUtils.decrypt()` ƒë·ªÉ gi·∫£i m√£ d·ªØ li·ªáu.
 * - `getChecksumKey()` tr·∫£ v·ªÅ kh√≥a d√πng ƒë·ªÉ ki·ªÉm tra checksum.
 * </pre>
 * <p>
 * **üìå V√≠ d·ª• c·∫•u h√¨nh trong `application.properties`:**
 * <pre>
 * {@code
 * custom.properties.security.request.private-key-checksum=your-checksum-key
 * custom.properties.security.request.private-key-encrypt=your-encryption-key
 * }
 * </pre>
 * <p>
 * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
 * <pre>
 * {@code
 * SecurityRequest securityRequest = new SecurityRequest();
 * String encrypted = securityRequest.encryptData("my_secret_data");
 * String decrypted = securityRequest.decryptData(encrypted);
 * System.out.println(decrypted); // my_secret_data
 * }
 * </pre>
 *
 * @author haidv
 * @version 1.0
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class SecurityRequest extends AbstractSecurityRequest {

  /** Kh√≥a b√≠ m·∫≠t d√πng ƒë·ªÉ ki·ªÉm tra checksum** */
  @Value("${custom.properties.security.request.private-key-checksum}")
  private String privateKeyChecksum;

  /** Kh√≥a b√≠ m·∫≠t d√πng ƒë·ªÉ m√£ h√≥a v√† gi·∫£i m√£ d·ªØ li·ªáu** */
  @Value("${custom.properties.security.request.private-key-encrypt}")
  private String privateKeyEncrypt;

  /**
   * **M√£ h√≥a d·ªØ li·ªáu (`encryptData`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y s·ª≠ d·ª•ng kh√≥a b√≠ m·∫≠t `privateKeyEncrypt` ƒë·ªÉ m√£ h√≥a chu·ªói ƒë·∫ßu v√†o
   * b·∫±ng thu·∫≠t to√°n AES.</p>
   * <p>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * String encrypted = securityRequest.encryptData("my_secret");
   * System.out.println(encrypted);
   * }
   * </pre>
   *
   * @param decryptStr Chu·ªói c·∫ßn m√£ h√≥a.
   * @return Chu·ªói ƒë√£ ƒë∆∞·ª£c m√£ h√≥a.
   * @throws RuntimeException N·∫øu qu√° tr√¨nh m√£ h√≥a th·∫•t b·∫°i.
   */
  @Override
  public String encryptData(String decryptStr) {
    try {
      return AESUtils.encrypt(privateKeyEncrypt, decryptStr);
    } catch (Exception e) {
      log.error(e.getMessage(), e);
      throw new BaseException(CommonErrorDef.NOT_ENCRYPT_SECURE_RESPONSE);
    }
  }

  /**
   * **Gi·∫£i m√£ d·ªØ li·ªáu (`decryptData`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y s·ª≠ d·ª•ng kh√≥a b√≠ m·∫≠t `privateKeyEncrypt` ƒë·ªÉ gi·∫£i m√£ chu·ªói ƒë·∫ßu v√†o
   * ƒë√£ ƒë∆∞·ª£c m√£ h√≥a b·∫±ng thu·∫≠t to√°n AES.</p>
   * <p>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * String decrypted = securityRequest.decryptData(encryptedData);
   * System.out.println(decrypted);
   * }
   * </pre>
   *
   * @param encryptStr Chu·ªói ƒë√£ m√£ h√≥a c·∫ßn gi·∫£i m√£.
   * @return Chu·ªói sau khi gi·∫£i m√£.
   * @throws RuntimeException N·∫øu qu√° tr√¨nh gi·∫£i m√£ th·∫•t b·∫°i.
   */
  @Override
  public String decryptData(String encryptStr) {
    try {
      return AESUtils.decrypt(privateKeyEncrypt, encryptStr);
    } catch (Exception e) {
      log.error(e.getMessage(), e);
      throw new BaseException(CommonErrorDef.NOT_DECRYPT_SECURE_REQUEST);
    }
  }

  /**
   * **L·∫•y kh√≥a ki·ªÉm tra checksum (`getChecksumKey`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y tr·∫£ v·ªÅ kh√≥a b√≠ m·∫≠t d√πng ƒë·ªÉ ki·ªÉm tra checksum c·ªßa d·ªØ li·ªáu.</p>
   * <p>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * String checksumKey = securityRequest.getChecksumKey();
   * System.out.println(checksumKey);
   * }
   * </pre>
   *
   * @return Chu·ªói kh√≥a checksum.
   */
  @Override
  public String getChecksumKey() {
    return privateKeyChecksum;
  }
}