package com.flowhub.base.utils;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.fasterxml.jackson.module.paramnames.ParameterNamesModule;
import java.io.IOException;
import lombok.experimental.UtilityClass;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;

/**
 * **L·ªõp `JsonUtils` - H·ªó tr·ª£ chuy·ªÉn ƒë·ªïi JSON v√† Object**
 *
 * <p>Class ti·ªán √≠ch n√†y cung c·∫•p c√°c ph∆∞∆°ng th·ª©c ƒë·ªÉ chuy·ªÉn ƒë·ªïi gi·ªØa `Object` v√† `JSON`
 * s·ª≠ d·ª•ng th∆∞ vi·ªán Jackson.</p>
 * <p>
 * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
 * <pre>
 * {@code
 * String jsonString = JsonUtils.toJson(new User("John", 30));
 * User user = JsonUtils.fromJson(jsonString, User.class);
 * }
 * </pre>
 *
 * @author haidv
 * @version 1.0
 */
@UtilityClass
@Slf4j
public class JsonUtils {

  /**
   * **Chuy·ªÉn ƒë·ªïi Object th√†nh chu·ªói JSON (`toJson`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y nh·∫≠n m·ªôt object v√† chuy·ªÉn ƒë·ªïi n√≥ th√†nh chu·ªói JSON.</p>
   * <p>
   * **üìå C·∫•u h√¨nh m·∫∑c ƒë·ªãnh:**
   * <pre>
   * - Kh√¥ng ghi c√°c thu·ªôc t√≠nh `null` (`Include.NON_NULL`).
   * - Kh√¥ng ghi ng√†y gi·ªù d∆∞·ªõi d·∫°ng timestamp.
   * - B·ªè qua l·ªói n·∫øu object kh√¥ng c√≥ field n√†o ƒë·ªÉ serialize (`FAIL_ON_EMPTY_BEANS` = false).
   * </pre>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * String jsonString = JsonUtils.toJson(new User("Alice", 25));
   * System.out.println(jsonString); // {"name": "Alice", "age": 25}
   * }
   * </pre>
   *
   * @param object ƒê·ªëi t∆∞·ª£ng c·∫ßn chuy·ªÉn ƒë·ªïi sang JSON.
   * @return Chu·ªói JSON ho·∫∑c chu·ªói r·ªóng n·∫øu c√≥ l·ªói.
   */
  public static String toJson(Object object) {
    ObjectMapper mapper = new ObjectMapper();
    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
    mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
    mapper.setSerializationInclusion(Include.NON_NULL);
    mapper.registerModule(new JavaTimeModule());
    mapper.registerModule(new ParameterNamesModule());
    mapper.registerModule(new Jdk8Module());
    String jsonString = StringUtils.EMPTY;
    try {
      jsonString = mapper.writeValueAsString(object);
    } catch (JsonProcessingException e) {
      log.error("Can't build json from object", e);
    }
    return jsonString;
  }

  /**
   * **Chuy·ªÉn ƒë·ªïi JSON th√†nh Object (`fromJson`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y nh·∫≠n m·ªôt chu·ªói JSON v√† chuy·ªÉn ƒë·ªïi n√≥ th√†nh m·ªôt Object c·ªßa class ch·ªâ
   * ƒë·ªãnh.</p>
   * <p>
   * **üìå C·∫•u h√¨nh m·∫∑c ƒë·ªãnh:**
   * <pre>
   * - B·ªè qua c√°c thu·ªôc t√≠nh kh√¥ng x√°c ƒë·ªãnh trong JSON (`FAIL_ON_UNKNOWN_PROPERTIES` = false).
   * - H·ªó tr·ª£ x·ª≠ l√Ω `JavaTimeModule` ƒë·ªÉ l√†m vi·ªác v·ªõi `LocalDateTime`.
   * </pre>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * String json = "{\"name\": \"Bob\", \"age\": 40}";
   * User user = JsonUtils.fromJson(json, User.class);
   * }
   * </pre>
   *
   * @param json      Chu·ªói JSON c·∫ßn chuy·ªÉn ƒë·ªïi.
   * @param valueType Class c·ªßa ƒë·ªëi t∆∞·ª£ng c·∫ßn chuy·ªÉn ƒë·ªïi.
   * @param <T>       Ki·ªÉu d·ªØ li·ªáu c·ªßa ƒë·ªëi t∆∞·ª£ng k·∫øt qu·∫£.
   * @return ƒê·ªëi t∆∞·ª£ng t∆∞∆°ng ·ª©ng ho·∫∑c `null` n·∫øu c√≥ l·ªói.
   */
  public static <T> T fromJson(String json, Class<T> valueType) {
    if (json == null) {
      return null;
    }

    T object = null;
    try {
      var objectMapper = new ObjectMapper();
      objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
      objectMapper.registerModule(new JavaTimeModule());
      object = objectMapper.readValue(json, valueType);
    } catch (IOException e) {
      log.error(e.getMessage());
    }

    return object;
  }

  /**
   * **Chuy·ªÉn ƒë·ªïi Object th√†nh m·ªôt Object kh√°c (`fromJson`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y cho ph√©p chuy·ªÉn ƒë·ªïi m·ªôt Object th√†nh m·ªôt Object c·ªßa class ch·ªâ ƒë·ªãnh,
   * h·ªØu √≠ch khi l√†m vi·ªác v·ªõi c√°c ƒë·ªëi t∆∞·ª£ng trung gian nh∆∞ `Map` ho·∫∑c JSON ƒë√£ parse.</p>
   * <p>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * Map<String, Object> data = Map.of("name", "Charlie", "age", 35);
   * User user = JsonUtils.fromJson(data, User.class);
   * }
   * </pre>
   *
   * @param json      ƒê·ªëi t∆∞·ª£ng c·∫ßn chuy·ªÉn ƒë·ªïi (c√≥ th·ªÉ l√† `Map` ho·∫∑c Object ƒë√£ parse).
   * @param valueType Class c·ªßa ƒë·ªëi t∆∞·ª£ng c·∫ßn chuy·ªÉn ƒë·ªïi.
   * @param <T>       Ki·ªÉu d·ªØ li·ªáu c·ªßa ƒë·ªëi t∆∞·ª£ng k·∫øt qu·∫£.
   * @return ƒê·ªëi t∆∞·ª£ng t∆∞∆°ng ·ª©ng ho·∫∑c `null` n·∫øu c√≥ l·ªói.
   */
  public static <T> T fromJson(Object json, Class<T> valueType) {
    if (json == null) {
      return null;
    }

    T object = null;
    try {
      var objectMapper = new ObjectMapper();
      objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
      objectMapper.registerModule(new JavaTimeModule());
      object = objectMapper.convertValue(json, valueType);
    } catch (Exception e) {
      log.error(e.getMessage());
    }

    return object;
  }

  /**
   * **Chuy·ªÉn ƒë·ªïi JSON th√†nh Object v·ªõi ki·ªÉu d·ªØ li·ªáu tham s·ªë (`fromJson`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y cho ph√©p chuy·ªÉn ƒë·ªïi JSON th√†nh Object c√≥ ki·ªÉu d·ªØ li·ªáu tham s·ªë,
   * gi√∫p l√†m vi·ªác v·ªõi c√°c ki·ªÉu d·ªØ li·ªáu generic nh∆∞ `List<T>` ho·∫∑c `Map<K, V>`.</p>
   * <p>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * String json = "[{\"name\": \"David\", \"age\": 28}, {\"name\": \"Emma\", \"age\": 22}]";
   * List<User> users = JsonUtils.fromJson(json, List.class, User.class);
   * }
   * </pre>
   *
   * @param json             Chu·ªói JSON c·∫ßn chuy·ªÉn ƒë·ªïi.
   * @param parentType       Class cha (v√≠ d·ª•: `List.class` ho·∫∑c `Map.class`).
   * @param parameterClasses C√°c class con c·ªßa ki·ªÉu d·ªØ li·ªáu tham s·ªë (v√≠ d·ª•: `User.class`).
   * @param <T>              Ki·ªÉu d·ªØ li·ªáu c·ªßa ƒë·ªëi t∆∞·ª£ng k·∫øt qu·∫£.
   * @return ƒê·ªëi t∆∞·ª£ng t∆∞∆°ng ·ª©ng ho·∫∑c `null` n·∫øu c√≥ l·ªói.
   */
  public static <T> T fromJson(String json, Class<?> parentType, Class<?>... parameterClasses) {
    if (json == null) {
      return null;
    }

    T object = null;
    try {
      var objectMapper = new ObjectMapper();
      objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
      objectMapper.registerModule(new JavaTimeModule());
      JavaType type =
          objectMapper.getTypeFactory().constructParametricType(parentType, parameterClasses);
      object = objectMapper.readValue(json, type);
    } catch (IOException e) {
      log.error(e.getMessage());
    }

    return object;
  }
}