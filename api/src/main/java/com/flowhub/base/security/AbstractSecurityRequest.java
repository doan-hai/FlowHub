package com.flowhub.base.security;

/**
 * **L·ªõp `AbstractSecurityRequest` - L·ªõp tr·ª´u t∆∞·ª£ng cho x·ª≠ l√Ω b·∫£o m·∫≠t d·ªØ li·ªáu**
 *
 * <p>L·ªõp n√†y cung c·∫•p c√°c ph∆∞∆°ng th·ª©c tr·ª´u t∆∞·ª£ng ƒë·ªÉ x·ª≠ l√Ω b·∫£o m·∫≠t d·ªØ li·ªáu,
 * bao g·ªìm m√£ h√≥a, gi·∫£i m√£ v√† l·∫•y kh√≥a ki·ªÉm tra t√≠nh to√†n v·∫πn.</p>
 * <pre>
 * **üìå C√°ch ho·∫°t ƒë·ªông:**
 * - C√°c l·ªõp con k·∫ø th·ª´a `AbstractSecurityRequest` ph·∫£i tri·ªÉn khai c√°c ph∆∞∆°ng th·ª©c
 *   ƒë·ªÉ th·ª±c hi·ªán m√£ h√≥a v√† gi·∫£i m√£ d·ªØ li·ªáu t√πy theo thu·∫≠t to√°n b·∫£o m·∫≠t ƒë∆∞·ª£c s·ª≠ d·ª•ng.
 * - `getChecksumKey()` ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l·∫•y kh√≥a ki·ªÉm tra t√≠nh to√†n v·∫πn c·ªßa d·ªØ li·ªáu.
 * </pre>
 * **üìå V√≠ d·ª• tri·ªÉn khai l·ªõp con:**
 * <pre>
 * {@code
 * public class AESecurityRequest extends AbstractSecurityRequest {
 *     @Override
 *     public String encryptData(String decryptStr) {
 *         return AESUtil.encrypt(decryptStr, SECRET_KEY);
 *     }
 *
 *     @Override
 *     public String decryptData(String encryptStr) {
 *         return AESUtil.decrypt(encryptStr, SECRET_KEY);
 *     }
 *
 *     @Override
 *     public String getChecksumKey() {
 *         return SECRET_KEY;
 *     }
 * }
 * }
 * </pre>
 *
 * @author haidv
 * @version 1.0
 */
public abstract class AbstractSecurityRequest {

  /**
   * **M√£ h√≥a d·ªØ li·ªáu (`encryptData`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y nh·∫≠n m·ªôt chu·ªói ƒë√£ gi·∫£i m√£ v√† tr·∫£ v·ªÅ chu·ªói ƒë√£ ƒë∆∞·ª£c m√£ h√≥a.
   * C√°c l·ªõp con ph·∫£i cung c·∫•p thu·∫≠t to√°n m√£ h√≥a c·ª• th·ªÉ.</p>
   * <p>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * String encrypted = securityRequest.encryptData("my_secret_data");
   * }
   * </pre>
   *
   * @param decryptStr D·ªØ li·ªáu ƒë·∫ßu v√†o c·∫ßn m√£ h√≥a.
   * @return Chu·ªói ƒë√£ ƒë∆∞·ª£c m√£ h√≥a.
   */
  public abstract String encryptData(String decryptStr);

  /**
   * **Gi·∫£i m√£ d·ªØ li·ªáu (`decryptData`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y nh·∫≠n m·ªôt chu·ªói ƒë√£ m√£ h√≥a v√† tr·∫£ v·ªÅ chu·ªói ƒë√£ ƒë∆∞·ª£c gi·∫£i m√£.
   * C√°c l·ªõp con ph·∫£i cung c·∫•p thu·∫≠t to√°n gi·∫£i m√£ c·ª• th·ªÉ.</p>
   * <p>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * String decrypted = securityRequest.decryptData("encrypted_string");
   * }
   * </pre>
   *
   * @param encryptStr D·ªØ li·ªáu ƒë·∫ßu v√†o ƒë√£ m√£ h√≥a.
   * @return Chu·ªói ƒë√£ ƒë∆∞·ª£c gi·∫£i m√£.
   */
  public abstract String decryptData(String encryptStr);

  /**
   * **L·∫•y kh√≥a ki·ªÉm tra (`getChecksumKey`)**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y tr·∫£ v·ªÅ kh√≥a b·∫£o m·∫≠t ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ki·ªÉm tra t√≠nh to√†n v·∫πn d·ªØ li·ªáu.
   * C√°c l·ªõp con ph·∫£i tri·ªÉn khai c∆° ch·∫ø l·∫•y kh√≥a ph√π h·ª£p v·ªõi thu·∫≠t to√°n b·∫£o m·∫≠t c·ªßa ch√∫ng.</p>
   * <p>
   * **üìå V√≠ d·ª• s·ª≠ d·ª•ng:**
   * <pre>
   * {@code
   * String checksumKey = securityRequest.getChecksumKey();
   * }
   * </pre>
   *
   * @return Kh√≥a b·∫£o m·∫≠t d√πng ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu.
   */
  public abstract String getChecksumKey();
}