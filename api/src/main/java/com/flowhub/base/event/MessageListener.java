package com.flowhub.base.event;

import jakarta.annotation.PostConstruct;

import java.lang.reflect.ParameterizedType;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.ThreadContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.support.Acknowledgment;
import com.flowhub.base.constant.RequestConstant;
import com.flowhub.base.redis.HistoryMessage;
import com.flowhub.base.redis.HistoryMessageRepository;
import com.flowhub.base.utils.JsonUtils;
import com.flowhub.base.utils.Snowflake;

/**
 * **L·ªõp `MessageListener` - L·∫Øng nghe v√† x·ª≠ l√Ω tin nh·∫Øn t·ª´ Kafka**
 *
 * <p>L·ªõp n√†y l√† m·ªôt `abstract class` d√πng ƒë·ªÉ x·ª≠ l√Ω tin nh·∫Øn Kafka. C√°c l·ªõp con c·∫ßn k·∫ø th·ª´a
 * v√† tri·ªÉn khai ph∆∞∆°ng th·ª©c `handleMessageEvent()` ƒë·ªÉ x·ª≠ l√Ω n·ªôi dung tin nh·∫Øn.</p>
 * <p>
 * **üìå C√°ch ho·∫°t ƒë·ªông:**
 * <p>Khi Kafka g·ª≠i m·ªôt tin nh·∫Øn ƒë·∫øn, `MessageListener` s·∫Ω:</p>
 * <ul>
 *   <li>üìå Ghi log th√¥ng tin tin nh·∫Øn.</li>
 *   <li>üìå Ki·ªÉm tra xem tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ch∆∞a th√¥ng qua Redis.</li>
 *   <li>üìå G·ªçi `handleMessageEvent()` ƒë·ªÉ x·ª≠ l√Ω n·ªôi dung tin nh·∫Øn.</li>
 *   <li>üìå N·∫øu g·∫∑p l·ªói, g·ª≠i tin nh·∫Øn v√†o h√†ng ƒë·ª£i retry ƒë·ªÉ th·ª≠ l·∫°i.</li>
 *   <li>üìå Cu·ªëi c√πng, x√°c nh·∫≠n Kafka ƒë√£ nh·∫≠n tin nh·∫Øn (`acknowledgment.acknowledge()`).</li>
 * </ul>
 * <p>
 * **üìå V√≠ d·ª• tri·ªÉn khai m·ªôt l·ªõp con t·ª´ `MessageListener`:**
 * <pre>
 * {@code
 * @Component
 * public class UserMessageListener extends MessageListener<UserData> {
 *
 *     @Override
 *     protected void handleMessageEvent(String topic, String partition, String offset, MessageData<UserData> input) {
 *         System.out.println("Received user data: " + input.getContent());
 *     }
 * }
 * }
 * </pre>
 *
 * @param <T> Ki·ªÉu d·ªØ li·ªáu c·ªßa tin nh·∫Øn.
 * @author haidv
 * @version 1.0
 */
@Slf4j
public abstract class MessageListener<T> {

  /** Kho l∆∞u tr·ªØ l·ªãch s·ª≠ tin nh·∫Øn trong Redis ƒë·ªÉ tr√°nh x·ª≠ l√Ω tr√πng l·∫∑p** */
  protected HistoryMessageRepository historyMessageRepository;

  /** Interceptor ƒë·ªÉ g·ª≠i tin nh·∫Øn retry khi c√≥ l·ªói x·∫£y ra** */
  protected MessageInterceptor messageInterceptor;

  /**
   * **Inject `MessageInterceptor` ƒë·ªÉ h·ªó tr·ª£ g·ª≠i tin nh·∫Øn retry**
   *
   * @param messageInterceptor ƒê·ªëi t∆∞·ª£ng `MessageInterceptor`.
   */
  @Autowired
  public final void setMessageInterceptor(MessageInterceptor messageInterceptor) {
    this.messageInterceptor = messageInterceptor;
  }

  /**
   * **Inject `HistoryMessageRepository` ƒë·ªÉ ki·ªÉm tra tin nh·∫Øn ƒë√£ x·ª≠ l√Ω**
   *
   * @param historyMessageRepository Kho l∆∞u tr·ªØ tin nh·∫Øn ƒë√£ x·ª≠ l√Ω.
   */
  @Autowired
  public final void setHistoryMessageRepository(HistoryMessageRepository historyMessageRepository) {
    this.historyMessageRepository = historyMessageRepository;
  }

  /**
   * **Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu generic ƒë∆∞·ª£c h·ªó tr·ª£**
   *
   * <p>Ph∆∞∆°ng th·ª©c n√†y ƒë∆∞·ª£c g·ªçi sau khi bean ƒë∆∞·ª£c kh·ªüi t·∫°o ƒë·ªÉ ƒë·∫£m b·∫£o l·ªõp con
   * c√≥ ki·ªÉu d·ªØ li·ªáu `T` h·ª£p l·ªá.</p>
   */
  @PostConstruct
  public void checkGenericTypeSupport() {
    try {
      this.getMessageContentType();
    } catch (Exception e) {
      log.error("MessageListener generic type support failed.");
      throw e;
    }
  }

  /**
   * **L·∫Øng nghe v√† x·ª≠ l√Ω tin nh·∫Øn t·ª´ Kafka (`messageListener`)**
   *
   * <p>Phi√™n b·∫£n n√†y ch·ªâ truy·ªÅn tham s·ªë c∆° b·∫£n, kh√¥ng c√≥ delay v√† retry.</p>
   *
   * @param data           D·ªØ li·ªáu tin nh·∫Øn t·ª´ Kafka.
   * @param topic          T√™n Kafka topic.
   * @param partition      Ph√¢n v√πng Kafka.
   * @param offset         V·ªã tr√≠ tin nh·∫Øn trong Kafka.
   * @param acknowledgment ƒê·ªëi t∆∞·ª£ng x√°c nh·∫≠n tin nh·∫Øn ƒë√£ nh·∫≠n.
   */
  @SuppressWarnings("unused")
  public void messageListener(
      String data, String topic, String partition, String offset, Acknowledgment acknowledgment) {
    messageListener(data, topic, partition, offset, acknowledgment, 0, 0);
  }

  /**
   * **L·∫Øng nghe v√† x·ª≠ l√Ω tin nh·∫Øn t·ª´ Kafka (`messageListener`)**
   *
   * <p>Phi√™n b·∫£n n√†y h·ªó tr·ª£ retry v√† delay n·∫øu g·∫∑p l·ªói.</p>
   *
   * @param data           D·ªØ li·ªáu tin nh·∫Øn t·ª´ Kafka.
   * @param topic          T√™n Kafka topic.
   * @param partition      Ph√¢n v√πng Kafka.
   * @param offset         V·ªã tr√≠ tin nh·∫Øn trong Kafka.
   * @param acknowledgment ƒê·ªëi t∆∞·ª£ng x√°c nh·∫≠n tin nh·∫Øn ƒë√£ nh·∫≠n.
   * @param delayTime      Th·ªùi gian delay n·∫øu c·∫ßn retry.
   * @param repeatCount    S·ªë l·∫ßn th·ª≠ l·∫°i khi g·∫∑p l·ªói.
   */
  public void messageListener(
      String data,
      String topic,
      String partition,
      String offset,
      Acknowledgment acknowledgment,
      long delayTime,
      Integer repeatCount) {
    this.initListener(topic, partition, offset, data);
    MessageData<T> input =
        JsonUtils.fromJson(data, MessageData.class, this.getMessageContentType());
    if (isNotValidMessage(input, topic, partition, offset, acknowledgment)) {
      return;
    }

    if (StringUtils.isBlank(input.getMessageId())) {
      input.updateMessageId(String.format("%s_%s_%s", topic, partition, offset));
    }
    try {
      if (isDuplicateMessage(input.getMessageId(), topic)) {
        return;
      }
      this.handleMessageEvent(topic, partition, offset, input);
      log.info("[KafkaConsumer][{}][{}][{}] Processed successfully!", topic, partition, offset);
    } catch (Exception e) {
      log.error("[KafkaConsumer][{}][{}][{}] Exception occurred: ", topic, partition, offset, e);
      handleRetry(input, topic, delayTime, repeatCount);
    } finally {
      acknowledgment.acknowledge();
      ThreadContext.clearAll();
    }
  }

  /**
   * **X·ª≠ l√Ω tin nh·∫Øn retry**
   */
  public void messageRetriesListener(
      String data, String topic, String partition, String offset, Acknowledgment acknowledgment) {
    this.initListener(topic, partition, offset, data);
    RetriesMessageData<T> retryMessage =
        JsonUtils.fromJson(data, RetriesMessageData.class, this.getMessageContentType());
    if (isNotValidMessage(retryMessage, topic, partition, offset, acknowledgment)) {
      return;
    }
    MessageData<T> retryData = retryMessage.getData();
    if (isNotValidMessage(retryData, topic, partition, offset, acknowledgment)) {
      return;
    }
    try {
      if (isDuplicateMessage(retryMessage.getMessageId(), topic)) {
        return;
      }
      handleMessageEvent(topic, partition, offset, retryData);
      messageInterceptor.convertAndSendRetriesEvent(retryMessage.deleteRetries());
      log.info("[KafkaConsumer][{}][{}][{}] Retries processed successfully!",
               topic,
               partition,
               offset);
    } catch (Exception e) {
      log.error("[KafkaConsumer][{}][{}][{}] Retry failed", topic, partition, offset, e);
      messageInterceptor.convertAndSendRetriesEvent(retryMessage.incrementRetriesNo());
    } finally {
      acknowledgment.acknowledge();
      ThreadContext.clearAll();
    }
  }

  /**
   * **Ki·ªÉm tra tin nh·∫Øn c√≥ h·ª£p l·ªá kh√¥ng**
   */
  private boolean isNotValidMessage(Object input, String topic, String partition, String offset,
                                    Acknowledgment acknowledgment) {
    if (input == null) {
      log.info("[KafkaConsumer][{}][{}][{}] Ignored invalid message", topic, partition, offset);
      acknowledgment.acknowledge();
      ThreadContext.clearAll();
      return true;
    }
    return false;
  }

  /**
   * **Ki·ªÉm tra tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ch∆∞a**
   */
  private boolean isDuplicateMessage(String messageId, String topic) {
    if (Boolean.FALSE.equals(historyMessageRepository.put(new HistoryMessage(messageId,
                                                                             topic,
                                                                             RequestConstant.BROKER_KAFKA)))) {
      log.warn("[KafkaConsumer][{}] Message already processed", topic);
      return true;
    }
    return false;
  }

  /**
   * **X·ª≠ l√Ω retry khi g·∫∑p l·ªói**
   */
  private void handleRetry(MessageData<T> input, String topic, long delayTime,
                           Integer repeatCount) {
    if (repeatCount > 0) {
      messageInterceptor.convertAndSendRetriesEvent(new RetriesMessageData<>(input.getMessageId(),
                                                                             input,
                                                                             topic,
                                                                             delayTime,
                                                                             repeatCount));
    }
  }

  /**
   * **Kh·ªüi t·∫°o th√¥ng tin log khi l·∫Øng nghe tin nh·∫Øn**
   *
   * @param topic     T√™n Kafka topic.
   * @param partition Ph√¢n v√πng Kafka.
   * @param offset    V·ªã tr√≠ tin nh·∫Øn trong Kafka.
   * @param data      D·ªØ li·ªáu tin nh·∫Øn.
   */
  private void initListener(String topic, String partition, String offset, String data) {
    ThreadContext.put(RequestConstant.REQUEST_ID, String.valueOf(Snowflake.getInstance().nextId()));
    ThreadContext.put(RequestConstant.BROKER_TYPE, RequestConstant.BROKER_KAFKA);
    ThreadContext.put(RequestConstant.MESSAGE_EVENT, topic);
    log.info("[KafkaConsumer][{}][{}][{}] Incoming: {}", topic, partition, offset, data);
  }

  /**
   * **Ph∆∞∆°ng th·ª©c tr·ª´u t∆∞·ª£ng ƒë·ªÉ x·ª≠ l√Ω n·ªôi dung tin nh·∫Øn**
   *
   * <p>C√°c l·ªõp con ph·∫£i tri·ªÉn khai ph∆∞∆°ng th·ª©c n√†y ƒë·ªÉ x·ª≠ l√Ω tin nh·∫Øn theo y√™u c·∫ßu.</p>
   *
   * @param topic     T√™n Kafka topic.
   * @param partition Ph√¢n v√πng Kafka.
   * @param offset    V·ªã tr√≠ tin nh·∫Øn trong Kafka.
   * @param input     N·ªôi dung tin nh·∫Øn c·∫ßn x·ª≠ l√Ω.
   */
  protected abstract void handleMessageEvent(
      String topic, String partition, String offset, MessageData<T> input);

  /**
   * **L·∫•y ki·ªÉu d·ªØ li·ªáu c·ªßa tin nh·∫Øn (`T`)**
   *
   * @return Ki·ªÉu d·ªØ li·ªáu c·ªßa tin nh·∫Øn.
   */
  @SuppressWarnings({"unchecked", "rawtypes"})
  private Class getMessageContentType() {
    return (Class<T>) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0];
  }
}