package com.flowhub.base.data;

import jakarta.persistence.Column;

import io.swagger.v3.oas.annotations.media.Schema;
import java.lang.reflect.Field;
import lombok.Getter;
import lombok.Setter;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

/**
 * **PagingParameter**
 *
 * <p>Class n√†y ƒë·∫°i di·ªán cho c√°c tham s·ªë ph√¢n trang v√† s·∫Øp x·∫øp d·ªØ li·ªáu.</p>
 *
 * <pre>
 * üìå Ch·ª©c nƒÉng ch√≠nh:
 * - Cung c·∫•p c√°c tham s·ªë c∆° b·∫£n cho ph√¢n trang nh∆∞ `pageSize`, `pageNo`, `sort`.
 * - H·ªó tr·ª£ chuy·ªÉn ƒë·ªïi th√†nh `Pageable` ƒë·ªÉ s·ª≠ d·ª•ng v·ªõi Spring Data JPA.
 * - H·ªó tr·ª£ l·∫•y t√™n c·ªôt t∆∞∆°ng ·ª©ng khi s·ª≠ d·ª•ng native query.
 * </pre>
 * <p>
 * **üìå C√°ch s·ª≠ d·ª•ng:**
 * <pre>
 * {@code
 * PagingParameter pagingParameter = new PagingParameter();
 * Pageable pageable = pagingParameter.pageable();
 * }
 * </pre>
 *
 * @author haidv
 * @version 1.0
 */
@Getter
@Setter
public class PagingParameter {

  @Schema(example = "20", description = "S·ªë l∆∞·ª£ng b·∫£n ghi tr√™n m·ªói trang")
  protected Integer pageSize = 20;

  @Schema(example = "1", description = "S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 1)")
  protected Integer pageNo = 1;

  @Schema(example = "createdAt:desc", description = "S·∫Øp x·∫øp d·ªØ li·ªáu")
  protected String sort = BaseEntity.Fields.createdAt + ":" + Sort.Direction.DESC;

  public Pageable pageable() {
    return pageable(false);
  }

  public Pageable pageable(boolean nativeQuery) {
    return pageable(nativeQuery, BaseEntity.class);
  }

  /**
   * **T·∫°o ƒë·ªëi t∆∞·ª£ng `Pageable` v·ªõi class entity**
   *
   * @param nativeQuery N·∫øu `true`, s·ª≠ d·ª•ng t√™n c·ªôt trong database thay v√¨ t√™n thu·ªôc t√≠nh trong
   *                    entity.
   * @param clazz       Class c·ªßa entity ƒë·ªÉ l·∫•y th√¥ng tin tr∆∞·ªùng khi nativeQuery = true.
   * @return ƒê·ªëi t∆∞·ª£ng `Pageable` v·ªõi th√¥ng tin ph√¢n trang v√† s·∫Øp x·∫øp.
   */
  public Pageable pageable(boolean nativeQuery, Class<?> clazz) {
    pageSize = (pageSize == null || pageSize <= 0) ? 200 : pageSize;
    pageNo = (pageNo == null || pageNo <= 0) ? 1 : pageNo;
    Sort srt = this.getSort(sort, nativeQuery, clazz);
    if (srt == null) {
      srt = Sort.unsorted();
    }
    return PageRequest.of(pageNo - 1, pageSize, srt);
  }

  /**
   * **Chuy·ªÉn ƒë·ªïi chu·ªói `sort` th√†nh `Sort` object**
   *
   * @param sort        Chu·ªói ƒë·ªãnh nghƒ©a s·∫Øp x·∫øp, v√≠ d·ª•: `createdAt:desc`.
   * @param nativeQuery N·∫øu `true`, l·∫•y t√™n c·ªôt trong database thay v√¨ t√™n thu·ªôc t√≠nh.
   * @param clazz       Class c·ªßa entity ƒë·ªÉ l·∫•y th√¥ng tin tr∆∞·ªùng khi nativeQuery = true.
   * @return ƒê·ªëi t∆∞·ª£ng `Sort` ch·ª©a th√¥ng tin s·∫Øp x·∫øp.
   */
  private Sort getSort(String sort, boolean nativeQuery, Class<?> clazz) {
    if (StringUtils.isEmpty(sort)) {
      return null;
    }
    Sort srt = null;
    String[] part = sort.split("_");
    for (String s : part) {
      String[] tmp = s.split(":");
      String property = tmp[0].trim();
      String direction = tmp[1].trim();
      if (tmp.length == 2) {
        String column = nativeQuery ? getColumnName(clazz, property) : property;
        if (srt == null) {
          srt =
              Sort.by(
                  Sort.Direction.fromString(direction), column);
        } else {
          srt.and(
              Sort.by(
                  Sort.Direction.fromString(direction), column));
        }
      }
    }
    return srt;
  }

  /**
   * **L·∫•y t√™n c·ªôt trong database t·ª´ t√™n thu·ªôc t√≠nh c·ªßa entity**
   *
   * @param clazz     Class c·ªßa entity.
   * @param fieldName T√™n thu·ªôc t√≠nh c·∫ßn l·∫•y t√™n c·ªôt.
   * @return T√™n c·ªôt trong database n·∫øu c√≥ annotation `@Column`, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ ch√≠nh `fieldName`.
   * @throws IllegalArgumentException N·∫øu kh√¥ng t√¨m th·∫•y field trong entity.
   */
  private String getColumnName(Class<?> clazz, String fieldName) {
    Field field = findField(clazz, fieldName);
    if (field == null) {
      throw new IllegalArgumentException("Field kh√¥ng t·ªìn t·∫°i: " + fieldName);
    }
    Column column = field.getAnnotation(Column.class);
    return (column != null)
        ? column.name()
        : fieldName; // N·∫øu kh√¥ng c√≥ @Column, d√πng ch√≠nh t√™n field
  }

  /**
   * **T√¨m ki·∫øm field trong class ho·∫∑c c√°c class cha**
   *
   * @param clazz     Class c·ªßa entity.
   * @param fieldName T√™n thu·ªôc t√≠nh c·∫ßn t√¨m.
   * @return ƒê·ªëi t∆∞·ª£ng `Field` n·∫øu t√¨m th·∫•y, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ `null`.
   */
  private Field findField(Class<?> clazz, String fieldName) {
    while (clazz != null) {
      try {
        return clazz.getDeclaredField(fieldName);
      } catch (NoSuchFieldException e) {
        clazz = clazz.getSuperclass();
      }
    }
    return null;
  }
}
